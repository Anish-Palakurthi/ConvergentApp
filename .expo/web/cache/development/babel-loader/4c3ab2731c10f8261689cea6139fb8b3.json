{"ast":null,"code":"\n\nimport * as StaticViewConfigValidator from \"./StaticViewConfigValidator\";\nimport { createViewConfig } from \"./ViewConfig\";\nimport UIManager from \"../ReactNative/UIManager\";\nimport ReactNativeViewConfigRegistry from \"../Renderer/shims/ReactNativeViewConfigRegistry\";\nimport getNativeComponentAttributes from \"../ReactNative/getNativeComponentAttributes\";\nimport verifyComponentAttributeEquivalence from \"../Utilities/verifyComponentAttributeEquivalence\";\nimport invariant from 'invariant';\nimport * as React from 'react';\nvar getRuntimeConfig;\n\nexport function setRuntimeConfigProvider(runtimeConfigProvider) {\n  invariant(getRuntimeConfig == null, 'NativeComponentRegistry.setRuntimeConfigProvider() called more than once.');\n  getRuntimeConfig = runtimeConfigProvider;\n}\n\nexport function get(name, viewConfigProvider) {\n  ReactNativeViewConfigRegistry.register(name, function () {\n    var _getRuntimeConfig;\n    var _ref = (_getRuntimeConfig = getRuntimeConfig == null ? void 0 : getRuntimeConfig(name)) != null ? _getRuntimeConfig : {\n        native: true,\n        strict: false,\n        verify: false\n      },\n      native = _ref.native,\n      strict = _ref.strict,\n      verify = _ref.verify;\n    var viewConfig = native ? getNativeComponentAttributes(name) : createViewConfig(viewConfigProvider());\n    if (verify) {\n      var nativeViewConfig = native ? viewConfig : getNativeComponentAttributes(name);\n      var staticViewConfig = native ? createViewConfig(viewConfigProvider()) : viewConfig;\n      if (strict) {\n        var validationOutput = StaticViewConfigValidator.validate(name, nativeViewConfig, staticViewConfig);\n        if (validationOutput.type === 'invalid') {\n          console.error(StaticViewConfigValidator.stringifyValidationResult(name, validationOutput));\n        }\n      } else {\n        verifyComponentAttributeEquivalence(nativeViewConfig, staticViewConfig);\n      }\n    }\n    return viewConfig;\n  });\n\n  return name;\n}\n\nexport function getWithFallback_DEPRECATED(name, viewConfigProvider) {\n  if (getRuntimeConfig == null) {\n    if (hasNativeViewConfig(name)) {\n      return get(name, viewConfigProvider);\n    }\n  } else {\n    if (getRuntimeConfig(name) != null) {\n      return get(name, viewConfigProvider);\n    }\n  }\n  var FallbackNativeComponent = function FallbackNativeComponent(props) {\n    return null;\n  };\n  FallbackNativeComponent.displayName = \"Fallback(\" + name + \")\";\n  return FallbackNativeComponent;\n}\nfunction hasNativeViewConfig(name) {\n  invariant(getRuntimeConfig == null, 'Unexpected invocation!');\n  return UIManager.getViewManagerConfig(name) != null;\n}\n\nexport function unstable_hasStaticViewConfig(name) {\n  var _getRuntimeConfig2;\n  var _ref2 = (_getRuntimeConfig2 = getRuntimeConfig == null ? void 0 : getRuntimeConfig(name)) != null ? _getRuntimeConfig2 : {\n      native: true\n    },\n    native = _ref2.native;\n  return !native;\n}","map":{"version":3,"names":["StaticViewConfigValidator","createViewConfig","UIManager","ReactNativeViewConfigRegistry","getNativeComponentAttributes","verifyComponentAttributeEquivalence","invariant","React","getRuntimeConfig","setRuntimeConfigProvider","runtimeConfigProvider","get","name","viewConfigProvider","register","native","strict","verify","viewConfig","nativeViewConfig","staticViewConfig","validationOutput","validate","type","console","error","stringifyValidationResult","getWithFallback_DEPRECATED","hasNativeViewConfig","FallbackNativeComponent","props","displayName","getViewManagerConfig","unstable_hasStaticViewConfig"],"sources":["C:/Users/kvnem/ConvergentApp/node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow strict-local\r\n * @format\r\n */\r\n\r\nimport * as StaticViewConfigValidator from './StaticViewConfigValidator';\r\nimport {createViewConfig} from './ViewConfig';\r\nimport UIManager from '../ReactNative/UIManager';\r\nimport type {\r\n  HostComponent,\r\n  PartialViewConfig,\r\n} from '../Renderer/shims/ReactNativeTypes';\r\nimport ReactNativeViewConfigRegistry from '../Renderer/shims/ReactNativeViewConfigRegistry';\r\nimport getNativeComponentAttributes from '../ReactNative/getNativeComponentAttributes';\r\nimport verifyComponentAttributeEquivalence from '../Utilities/verifyComponentAttributeEquivalence';\r\nimport invariant from 'invariant';\r\nimport * as React from 'react';\r\n\r\nlet getRuntimeConfig;\r\n\r\n/**\r\n * Configures a function that is called to determine whether a given component\r\n * should be registered using reflection of the native component at runtime.\r\n *\r\n * The provider should return null if the native component is unavailable in\r\n * the current environment.\r\n */\r\nexport function setRuntimeConfigProvider(\r\n  runtimeConfigProvider: (name: string) => ?{\r\n    native: boolean,\r\n    strict: boolean,\r\n    verify: boolean,\r\n  },\r\n): void {\r\n  invariant(\r\n    getRuntimeConfig == null,\r\n    'NativeComponentRegistry.setRuntimeConfigProvider() called more than once.',\r\n  );\r\n  getRuntimeConfig = runtimeConfigProvider;\r\n}\r\n\r\n/**\r\n * Gets a `NativeComponent` that can be rendered by React Native.\r\n *\r\n * The supplied `viewConfigProvider` may or may not be invoked and utilized,\r\n * depending on how `setRuntimeConfigProvider` is configured.\r\n */\r\nexport function get<Config>(\r\n  name: string,\r\n  viewConfigProvider: () => PartialViewConfig,\r\n): HostComponent<Config> {\r\n  ReactNativeViewConfigRegistry.register(name, () => {\r\n    const {native, strict, verify} = getRuntimeConfig?.(name) ?? {\r\n      native: true,\r\n      strict: false,\r\n      verify: false,\r\n    };\r\n\r\n    const viewConfig = native\r\n      ? getNativeComponentAttributes(name)\r\n      : createViewConfig(viewConfigProvider());\r\n\r\n    if (verify) {\r\n      const nativeViewConfig = native\r\n        ? viewConfig\r\n        : getNativeComponentAttributes(name);\r\n      const staticViewConfig = native\r\n        ? createViewConfig(viewConfigProvider())\r\n        : viewConfig;\r\n\r\n      if (strict) {\r\n        const validationOutput = StaticViewConfigValidator.validate(\r\n          name,\r\n          nativeViewConfig,\r\n          staticViewConfig,\r\n        );\r\n\r\n        if (validationOutput.type === 'invalid') {\r\n          console.error(\r\n            StaticViewConfigValidator.stringifyValidationResult(\r\n              name,\r\n              validationOutput,\r\n            ),\r\n          );\r\n        }\r\n      } else {\r\n        verifyComponentAttributeEquivalence(nativeViewConfig, staticViewConfig);\r\n      }\r\n    }\r\n\r\n    return viewConfig;\r\n  });\r\n\r\n  // $FlowFixMe[incompatible-return] `NativeComponent` is actually string!\r\n  return name;\r\n}\r\n\r\n/**\r\n * Same as `NativeComponentRegistry.get(...)`, except this will check either\r\n * the `setRuntimeConfigProvider` configuration or use native reflection (slow)\r\n * to determine whether this native component is available.\r\n *\r\n * If the native component is not available, a stub component is returned. Note\r\n * that the return value of this is not `HostComponent` because the returned\r\n * component instance is not guaranteed to have native methods.\r\n */\r\nexport function getWithFallback_DEPRECATED<Config>(\r\n  name: string,\r\n  viewConfigProvider: () => PartialViewConfig,\r\n): React.AbstractComponent<Config> {\r\n  if (getRuntimeConfig == null) {\r\n    // `getRuntimeConfig == null` when static view configs are disabled\r\n    // If `setRuntimeConfigProvider` is not configured, use native reflection.\r\n    if (hasNativeViewConfig(name)) {\r\n      return get<Config>(name, viewConfigProvider);\r\n    }\r\n  } else {\r\n    // If there is no runtime config, then the native component is unavailable.\r\n    if (getRuntimeConfig(name) != null) {\r\n      return get<Config>(name, viewConfigProvider);\r\n    }\r\n  }\r\n\r\n  const FallbackNativeComponent = function (props: Config): React.Node {\r\n    return null;\r\n  };\r\n  FallbackNativeComponent.displayName = `Fallback(${name})`;\r\n  return FallbackNativeComponent;\r\n}\r\n\r\nfunction hasNativeViewConfig(name: string): boolean {\r\n  invariant(getRuntimeConfig == null, 'Unexpected invocation!');\r\n  return UIManager.getViewManagerConfig(name) != null;\r\n}\r\n\r\n/**\r\n * Unstable API. Do not use!\r\n *\r\n * This method returns if there is a StaticViewConfig registered for the\r\n * component name received as a parameter.\r\n */\r\nexport function unstable_hasStaticViewConfig(name: string): boolean {\r\n  const {native} = getRuntimeConfig?.(name) ?? {\r\n    native: true,\r\n  };\r\n  return !native;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}