{"ast":null,"code":"\n\nimport NativeDevSettings from \"../NativeModules/specs/NativeDevSettings\";\nimport NativeEventEmitter from \"../EventEmitter/NativeEventEmitter\";\nimport Platform from \"../Utilities/Platform\";\nvar DevSettings = {\n  addMenuItem: function addMenuItem(title, handler) {},\n  reload: function reload(reason) {},\n  onFastRefresh: function onFastRefresh() {}\n};\nif (__DEV__) {\n  var emitter = new NativeEventEmitter(\n  Platform.OS !== 'ios' ? null : NativeDevSettings);\n  var subscriptions = new Map();\n  DevSettings = {\n    addMenuItem: function addMenuItem(title, handler) {\n      var subscription = subscriptions.get(title);\n      if (subscription != null) {\n        subscription.remove();\n      } else {\n        NativeDevSettings.addMenuItem(title);\n      }\n      subscription = emitter.addListener('didPressMenuItem', function (event) {\n        if (event.title === title) {\n          handler();\n        }\n      });\n      subscriptions.set(title, subscription);\n    },\n    reload: function reload(reason) {\n      if (NativeDevSettings.reloadWithReason != null) {\n        NativeDevSettings.reloadWithReason(reason != null ? reason : 'Uncategorized from JS');\n      } else {\n        NativeDevSettings.reload();\n      }\n    },\n    onFastRefresh: function onFastRefresh() {\n      NativeDevSettings.onFastRefresh == null ? void 0 : NativeDevSettings.onFastRefresh();\n    }\n  };\n}\nmodule.exports = DevSettings;","map":{"version":3,"names":["NativeDevSettings","NativeEventEmitter","Platform","DevSettings","addMenuItem","title","handler","reload","reason","onFastRefresh","__DEV__","emitter","OS","subscriptions","Map","subscription","get","remove","addListener","event","set","reloadWithReason","module","exports"],"sources":["C:/Users/kvnem/ConvergentApp/node_modules/react-native/Libraries/Utilities/DevSettings.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow strict-local\r\n * @format\r\n */\r\n\r\nimport NativeDevSettings from '../NativeModules/specs/NativeDevSettings';\r\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\r\nimport Platform from '../Utilities/Platform';\r\n\r\nlet DevSettings: {\r\n  addMenuItem(title: string, handler: () => mixed): void,\r\n  reload(reason?: string): void,\r\n  onFastRefresh(): void,\r\n} = {\r\n  addMenuItem(title: string, handler: () => mixed): void {},\r\n  reload(reason?: string): void {},\r\n  onFastRefresh(): void {},\r\n};\r\n\r\ntype DevSettingsEventDefinitions = {\r\n  didPressMenuItem: [{title: string}],\r\n};\r\n\r\nif (__DEV__) {\r\n  const emitter = new NativeEventEmitter<DevSettingsEventDefinitions>(\r\n    // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior\r\n    // If you want to use the native module on other platforms, please remove this condition and test its behavior\r\n    Platform.OS !== 'ios' ? null : NativeDevSettings,\r\n  );\r\n  const subscriptions = new Map();\r\n\r\n  DevSettings = {\r\n    addMenuItem(title: string, handler: () => mixed): void {\r\n      // Make sure items are not added multiple times. This can\r\n      // happen when hot reloading the module that registers the\r\n      // menu items. The title is used as the id which means we\r\n      // don't support multiple items with the same name.\r\n      let subscription = subscriptions.get(title);\r\n      if (subscription != null) {\r\n        subscription.remove();\r\n      } else {\r\n        NativeDevSettings.addMenuItem(title);\r\n      }\r\n\r\n      subscription = emitter.addListener('didPressMenuItem', event => {\r\n        if (event.title === title) {\r\n          handler();\r\n        }\r\n      });\r\n      subscriptions.set(title, subscription);\r\n    },\r\n    reload(reason?: string): void {\r\n      if (NativeDevSettings.reloadWithReason != null) {\r\n        NativeDevSettings.reloadWithReason(reason ?? 'Uncategorized from JS');\r\n      } else {\r\n        NativeDevSettings.reload();\r\n      }\r\n    },\r\n    onFastRefresh(): void {\r\n      NativeDevSettings.onFastRefresh?.();\r\n    },\r\n  };\r\n}\r\n\r\nmodule.exports = DevSettings;\r\n"],"mappings":";;AAUA,OAAOA,iBAAiB;AACxB,OAAOC,kBAAkB;AACzB,OAAOC,QAAQ;AAEf,IAAIC,WAIH,GAAG;EACFC,WAAW,uBAACC,KAAa,EAAEC,OAAoB,EAAQ,CAAC,CAAC;EACzDC,MAAM,kBAACC,MAAe,EAAQ,CAAC,CAAC;EAChCC,aAAa,2BAAS,CAAC;AACzB,CAAC;AAMD,IAAIC,OAAO,EAAE;EACX,IAAMC,OAAO,GAAG,IAAIV,kBAAkB;EAGpCC,QAAQ,CAACU,EAAE,KAAK,KAAK,GAAG,IAAI,GAAGZ,iBAAiB,CACjD;EACD,IAAMa,aAAa,GAAG,IAAIC,GAAG,EAAE;EAE/BX,WAAW,GAAG;IACZC,WAAW,uBAACC,KAAa,EAAEC,OAAoB,EAAQ;MAKrD,IAAIS,YAAY,GAAGF,aAAa,CAACG,GAAG,CAACX,KAAK,CAAC;MAC3C,IAAIU,YAAY,IAAI,IAAI,EAAE;QACxBA,YAAY,CAACE,MAAM,EAAE;MACvB,CAAC,MAAM;QACLjB,iBAAiB,CAACI,WAAW,CAACC,KAAK,CAAC;MACtC;MAEAU,YAAY,GAAGJ,OAAO,CAACO,WAAW,CAAC,kBAAkB,EAAE,UAAAC,KAAK,EAAI;QAC9D,IAAIA,KAAK,CAACd,KAAK,KAAKA,KAAK,EAAE;UACzBC,OAAO,EAAE;QACX;MACF,CAAC,CAAC;MACFO,aAAa,CAACO,GAAG,CAACf,KAAK,EAAEU,YAAY,CAAC;IACxC,CAAC;IACDR,MAAM,kBAACC,MAAe,EAAQ;MAC5B,IAAIR,iBAAiB,CAACqB,gBAAgB,IAAI,IAAI,EAAE;QAC9CrB,iBAAiB,CAACqB,gBAAgB,CAACb,MAAM,WAANA,MAAM,GAAI,uBAAuB,CAAC;MACvE,CAAC,MAAM;QACLR,iBAAiB,CAACO,MAAM,EAAE;MAC5B;IACF,CAAC;IACDE,aAAa,2BAAS;MACpBT,iBAAiB,CAACS,aAAa,oBAA/BT,iBAAiB,CAACS,aAAa,EAAI;IACrC;EACF,CAAC;AACH;AAEAa,MAAM,CAACC,OAAO,GAAGpB,WAAW"},"metadata":{},"sourceType":"module"}