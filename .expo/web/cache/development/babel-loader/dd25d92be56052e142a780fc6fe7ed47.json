{"ast":null,"code":"\n\nvar dispatchCommand;\nif (global.RN$Bridgeless) {\n  dispatchCommand = require(\"../../Libraries/Renderer/shims/ReactFabric\").dispatchCommand;\n} else {\n  dispatchCommand = require(\"../../Libraries/Renderer/shims/ReactNative\").dispatchCommand;\n}\nfunction codegenNativeCommands(options) {\n  var commandObj = {};\n  options.supportedCommands.forEach(function (command) {\n    commandObj[command] = function (ref) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      dispatchCommand(ref, command, args);\n    };\n  });\n  return commandObj;\n}\nexport default codegenNativeCommands;","map":{"version":3,"names":["dispatchCommand","global","RN$Bridgeless","require","codegenNativeCommands","options","commandObj","supportedCommands","forEach","command","ref","args"],"sources":["C:/Users/kvnem/ConvergentApp/node_modules/react-native/Libraries/Utilities/codegenNativeCommands.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n */\r\n\r\nlet dispatchCommand;\r\nif (global.RN$Bridgeless) {\r\n  // Note: this function has the same implementation in the legacy and new renderer.\r\n  // However, evaluating the old renderer comes with some side effects.\r\n  dispatchCommand =\r\n    require('../../Libraries/Renderer/shims/ReactFabric').dispatchCommand;\r\n} else {\r\n  dispatchCommand =\r\n    require('../../Libraries/Renderer/shims/ReactNative').dispatchCommand;\r\n}\r\n\r\ntype Options<T = string> = $ReadOnly<{|\r\n  supportedCommands: $ReadOnlyArray<T>,\r\n|}>;\r\n\r\nfunction codegenNativeCommands<T: interface {}>(options: Options<$Keys<T>>): T {\r\n  const commandObj: {[$Keys<T>]: (...$ReadOnlyArray<mixed>) => void} = {};\r\n\r\n  options.supportedCommands.forEach(command => {\r\n    commandObj[command] = (ref, ...args) => {\r\n      dispatchCommand(ref, command, args);\r\n    };\r\n  });\r\n\r\n  return ((commandObj: any): T);\r\n}\r\n\r\nexport default codegenNativeCommands;\r\n"],"mappings":";;AAUA,IAAIA,eAAe;AACnB,IAAIC,MAAM,CAACC,aAAa,EAAE;EAGxBF,eAAe,GACbG,OAAO,8CAA8C,CAACH,eAAe;AACzE,CAAC,MAAM;EACLA,eAAe,GACbG,OAAO,8CAA8C,CAACH,eAAe;AACzE;AAMA,SAASI,qBAAqB,CAAkBC,OAA0B,EAAK;EAC7E,IAAMC,UAA4D,GAAG,CAAC,CAAC;EAEvED,OAAO,CAACE,iBAAiB,CAACC,OAAO,CAAC,UAAAC,OAAO,EAAI;IAC3CH,UAAU,CAACG,OAAO,CAAC,GAAG,UAACC,GAAG,EAAc;MAAA,kCAATC,IAAI;QAAJA,IAAI;MAAA;MACjCX,eAAe,CAACU,GAAG,EAAED,OAAO,EAAEE,IAAI,CAAC;IACrC,CAAC;EACH,CAAC,CAAC;EAEF,OAASL,UAAU;AACrB;AAEA,eAAeF,qBAAqB"},"metadata":{},"sourceType":"module"}