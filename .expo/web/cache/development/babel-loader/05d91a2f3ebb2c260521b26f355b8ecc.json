{"ast":null,"code":"\n\n'use strict';\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar FormData = function () {\n  function FormData() {\n    _classCallCheck(this, FormData);\n    this._parts = [];\n  }\n  _createClass(FormData, [{\n    key: \"append\",\n    value: function append(key, value) {\n      this._parts.push([key, value]);\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll(key) {\n      return this._parts.filter(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n          name = _ref2[0];\n        return name === key;\n      }).map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          value = _ref4[1];\n        return value;\n      });\n    }\n  }, {\n    key: \"getParts\",\n    value: function getParts() {\n      return this._parts.map(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n          name = _ref6[0],\n          value = _ref6[1];\n        var contentDisposition = 'form-data; name=\"' + name + '\"';\n        var headers = {\n          'content-disposition': contentDisposition\n        };\n\n        if (typeof value === 'object' && !Array.isArray(value) && value) {\n          if (typeof value.name === 'string') {\n            headers['content-disposition'] += '; filename=\"' + value.name + '\"';\n          }\n          if (typeof value.type === 'string') {\n            headers['content-type'] = value.type;\n          }\n          return _objectSpread(_objectSpread({}, value), {}, {\n            headers: headers,\n            fieldName: name\n          });\n        }\n        return {\n          string: String(value),\n          headers: headers,\n          fieldName: name\n        };\n      });\n    }\n  }]);\n  return FormData;\n}();\nmodule.exports = FormData;","map":{"version":3,"names":["FormData","_parts","key","value","push","filter","name","map","contentDisposition","headers","Array","isArray","type","fieldName","string","String","module","exports"],"sources":["C:/Users/kvnem/ConvergentApp/node_modules/react-native/Libraries/Network/FormData.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict\r\n */\r\n\r\n'use strict';\r\n\r\ntype FormDataValue = string | {name?: string, type?: string, uri: string};\r\ntype FormDataNameValuePair = [string, FormDataValue];\r\n\r\ntype Headers = {[name: string]: string, ...};\r\ntype FormDataPart =\r\n  | {\r\n      string: string,\r\n      headers: Headers,\r\n      ...\r\n    }\r\n  | {\r\n      uri: string,\r\n      headers: Headers,\r\n      name?: string,\r\n      type?: string,\r\n      ...\r\n    };\r\n\r\n/**\r\n * Polyfill for XMLHttpRequest2 FormData API, allowing multipart POST requests\r\n * with mixed data (string, native files) to be submitted via XMLHttpRequest.\r\n *\r\n * Example:\r\n *\r\n *   var photo = {\r\n *     uri: uriFromCameraRoll,\r\n *     type: 'image/jpeg',\r\n *     name: 'photo.jpg',\r\n *   };\r\n *\r\n *   var body = new FormData();\r\n *   body.append('authToken', 'secret');\r\n *   body.append('photo', photo);\r\n *   body.append('title', 'A beautiful photo!');\r\n *\r\n *   xhr.open('POST', serverURL);\r\n *   xhr.send(body);\r\n */\r\nclass FormData {\r\n  _parts: Array<FormDataNameValuePair>;\r\n\r\n  constructor() {\r\n    this._parts = [];\r\n  }\r\n\r\n  append(key: string, value: FormDataValue) {\r\n    // The XMLHttpRequest spec doesn't specify if duplicate keys are allowed.\r\n    // MDN says that any new values should be appended to existing values.\r\n    // In any case, major browsers allow duplicate keys, so that's what we'll do\r\n    // too. They'll simply get appended as additional form data parts in the\r\n    // request body, leaving the server to deal with them.\r\n    this._parts.push([key, value]);\r\n  }\r\n\r\n  getAll(key: string): Array<FormDataValue> {\r\n    return this._parts\r\n      .filter(([name]) => name === key)\r\n      .map(([, value]) => value);\r\n  }\r\n\r\n  getParts(): Array<FormDataPart> {\r\n    return this._parts.map(([name, value]) => {\r\n      const contentDisposition = 'form-data; name=\"' + name + '\"';\r\n\r\n      const headers: Headers = {'content-disposition': contentDisposition};\r\n\r\n      // The body part is a \"blob\", which in React Native just means\r\n      // an object with a `uri` attribute. Optionally, it can also\r\n      // have a `name` and `type` attribute to specify filename and\r\n      // content type (cf. web Blob interface.)\r\n      if (typeof value === 'object' && !Array.isArray(value) && value) {\r\n        if (typeof value.name === 'string') {\r\n          headers['content-disposition'] += '; filename=\"' + value.name + '\"';\r\n        }\r\n        if (typeof value.type === 'string') {\r\n          headers['content-type'] = value.type;\r\n        }\r\n        return {...value, headers, fieldName: name};\r\n      }\r\n      // Convert non-object values to strings as per FormData.append() spec\r\n      return {string: String(value), headers, fieldName: name};\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = FormData;\r\n"],"mappings":";;AAUA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAwCPA,QAAQ;EAGZ,oBAAc;IAAA;IACZ,IAAI,CAACC,MAAM,GAAG,EAAE;EAClB;EAAC;IAAA;IAAA,OAED,gBAAOC,GAAW,EAAEC,KAAoB,EAAE;MAMxC,IAAI,CAACF,MAAM,CAACG,IAAI,CAAC,CAACF,GAAG,EAAEC,KAAK,CAAC,CAAC;IAChC;EAAC;IAAA;IAAA,OAED,gBAAOD,GAAW,EAAwB;MACxC,OAAO,IAAI,CAACD,MAAM,CACfI,MAAM,CAAC;QAAA;UAAEC,IAAI;QAAA,OAAMA,IAAI,KAAKJ,GAAG;MAAA,EAAC,CAChCK,GAAG,CAAC;QAAA;UAAIJ,KAAK;QAAA,OAAMA,KAAK;MAAA,EAAC;IAC9B;EAAC;IAAA;IAAA,OAED,oBAAgC;MAC9B,OAAO,IAAI,CAACF,MAAM,CAACM,GAAG,CAAC,iBAAmB;QAAA;UAAjBD,IAAI;UAAEH,KAAK;QAClC,IAAMK,kBAAkB,GAAG,mBAAmB,GAAGF,IAAI,GAAG,GAAG;QAE3D,IAAMG,OAAgB,GAAG;UAAC,qBAAqB,EAAED;QAAkB,CAAC;;QAMpE,IAAI,OAAOL,KAAK,KAAK,QAAQ,IAAI,CAACO,KAAK,CAACC,OAAO,CAACR,KAAK,CAAC,IAAIA,KAAK,EAAE;UAC/D,IAAI,OAAOA,KAAK,CAACG,IAAI,KAAK,QAAQ,EAAE;YAClCG,OAAO,CAAC,qBAAqB,CAAC,IAAI,cAAc,GAAGN,KAAK,CAACG,IAAI,GAAG,GAAG;UACrE;UACA,IAAI,OAAOH,KAAK,CAACS,IAAI,KAAK,QAAQ,EAAE;YAClCH,OAAO,CAAC,cAAc,CAAC,GAAGN,KAAK,CAACS,IAAI;UACtC;UACA,uCAAWT,KAAK;YAAEM,OAAO,EAAPA,OAAO;YAAEI,SAAS,EAAEP;UAAI;QAC5C;QAEA,OAAO;UAACQ,MAAM,EAAEC,MAAM,CAACZ,KAAK,CAAC;UAAEM,OAAO,EAAPA,OAAO;UAAEI,SAAS,EAAEP;QAAI,CAAC;MAC1D,CAAC,CAAC;IACJ;EAAC;EAAA;AAAA;AAGHU,MAAM,CAACC,OAAO,GAAGjB,QAAQ"},"metadata":{},"sourceType":"script"}