{"ast":null,"code":"\n\n'use strict';\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar getDevServer = require(\"./getDevServer\");\nfunction symbolicateStackTrace(_x) {\n  return _symbolicateStackTrace.apply(this, arguments);\n}\nfunction _symbolicateStackTrace() {\n  _symbolicateStackTrace = _asyncToGenerator(function* (stack) {\n    var _global$fetch;\n    var devServer = getDevServer();\n    if (!devServer.bundleLoadedFromServer) {\n      throw new Error('Bundle was not loaded from Metro.');\n    }\n\n    var fetch = (_global$fetch = global.fetch) != null ? _global$fetch : require(\"../../Network/fetch\");\n    var response = yield fetch(devServer.url + 'symbolicate', {\n      method: 'POST',\n      body: JSON.stringify({\n        stack: stack\n      })\n    });\n    return yield response.json();\n  });\n  return _symbolicateStackTrace.apply(this, arguments);\n}\nmodule.exports = symbolicateStackTrace;","map":{"version":3,"names":["getDevServer","require","symbolicateStackTrace","stack","devServer","bundleLoadedFromServer","Error","fetch","global","response","url","method","body","JSON","stringify","json","module","exports"],"sources":["C:/Users/kvnem/ConvergentApp/node_modules/react-native/Libraries/Core/Devtools/symbolicateStackTrace.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict\r\n */\r\n\r\n'use strict';\r\n\r\nconst getDevServer = require('./getDevServer');\r\n\r\nimport type {StackFrame} from '../NativeExceptionsManager';\r\n\r\nexport type CodeFrame = $ReadOnly<{\r\n  content: string,\r\n  location: ?{\r\n    row: number,\r\n    column: number,\r\n    ...\r\n  },\r\n  fileName: string,\r\n}>;\r\n\r\nexport type SymbolicatedStackTrace = $ReadOnly<{\r\n  stack: Array<StackFrame>,\r\n  codeFrame: ?CodeFrame,\r\n}>;\r\n\r\nasync function symbolicateStackTrace(\r\n  stack: Array<StackFrame>,\r\n): Promise<SymbolicatedStackTrace> {\r\n  const devServer = getDevServer();\r\n  if (!devServer.bundleLoadedFromServer) {\r\n    throw new Error('Bundle was not loaded from Metro.');\r\n  }\r\n\r\n  // Lazy-load `fetch` until the first symbolication call to avoid circular requires.\r\n  const fetch = global.fetch ?? require('../../Network/fetch');\r\n  const response = await fetch(devServer.url + 'symbolicate', {\r\n    method: 'POST',\r\n    body: JSON.stringify({stack}),\r\n  });\r\n  return await response.json();\r\n}\r\n\r\nmodule.exports = symbolicateStackTrace;\r\n"],"mappings":";;AAUA,YAAY;;AAAC;AAEb,IAAMA,YAAY,GAAGC,OAAO,kBAAkB;AAAC,SAmBhCC,qBAAqB;EAAA;AAAA;AAAA;EAAA,2CAApC,WACEC,KAAwB,EACS;IAAA;IACjC,IAAMC,SAAS,GAAGJ,YAAY,EAAE;IAChC,IAAI,CAACI,SAAS,CAACC,sBAAsB,EAAE;MACrC,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;IACtD;;IAGA,IAAMC,KAAK,oBAAGC,MAAM,CAACD,KAAK,4BAAIN,OAAO,uBAAuB;IAC5D,IAAMQ,QAAQ,SAASF,KAAK,CAACH,SAAS,CAACM,GAAG,GAAG,aAAa,EAAE;MAC1DC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACX,KAAK,EAALA;MAAK,CAAC;IAC9B,CAAC,CAAC;IACF,aAAaM,QAAQ,CAACM,IAAI,EAAE;EAC9B,CAAC;EAAA;AAAA;AAEDC,MAAM,CAACC,OAAO,GAAGf,qBAAqB"},"metadata":{},"sourceType":"script"}