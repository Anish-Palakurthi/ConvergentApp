{"ast":null,"code":"\n\n'use strict';\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar InspectorAgent = require(\"./InspectorAgent\");\nvar JSInspector = require(\"./JSInspector\");\nvar XMLHttpRequest = require(\"../Network/XMLHttpRequest\");\nvar Interceptor = function () {\n  function Interceptor(agent) {\n    _classCallCheck(this, Interceptor);\n    this._agent = agent;\n    this._requests = new Map();\n  }\n  _createClass(Interceptor, [{\n    key: \"getData\",\n    value: function getData(requestId) {\n      return this._requests.get(requestId);\n    }\n  }, {\n    key: \"requestSent\",\n    value: function requestSent(id, url, method, headers) {\n      var requestId = String(id);\n      this._requests.set(requestId, '');\n      var request = {\n        url: url,\n        method: method,\n        headers: headers,\n        initialPriority: 'Medium'\n      };\n      var event = {\n        requestId: requestId,\n        documentURL: '',\n        frameId: '1',\n        loaderId: '1',\n        request: request,\n        timestamp: JSInspector.getTimestamp(),\n        initiator: {\n          type: 'other'\n        },\n        type: 'Other'\n      };\n      this._agent.sendEvent('requestWillBeSent', event);\n    }\n  }, {\n    key: \"responseReceived\",\n    value: function responseReceived(id, url, status, headers) {\n      var requestId = String(id);\n      var response = {\n        url: url,\n        status: status,\n        statusText: String(status),\n        headers: headers,\n        requestHeaders: {},\n        mimeType: this._getMimeType(headers),\n        connectionReused: false,\n        connectionId: -1,\n        encodedDataLength: 0,\n        securityState: 'unknown'\n      };\n      var event = {\n        requestId: requestId,\n        frameId: '1',\n        loaderId: '1',\n        timestamp: JSInspector.getTimestamp(),\n        type: 'Other',\n        response: response\n      };\n      this._agent.sendEvent('responseReceived', event);\n    }\n  }, {\n    key: \"dataReceived\",\n    value: function dataReceived(id, data) {\n      var requestId = String(id);\n      var existingData = this._requests.get(requestId) || '';\n      this._requests.set(requestId, existingData.concat(data));\n      var event = {\n        requestId: requestId,\n        timestamp: JSInspector.getTimestamp(),\n        dataLength: data.length,\n        encodedDataLength: data.length\n      };\n      this._agent.sendEvent('dataReceived', event);\n    }\n  }, {\n    key: \"loadingFinished\",\n    value: function loadingFinished(id, encodedDataLength) {\n      var event = {\n        requestId: String(id),\n        timestamp: JSInspector.getTimestamp(),\n        encodedDataLength: encodedDataLength\n      };\n      this._agent.sendEvent('loadingFinished', event);\n    }\n  }, {\n    key: \"loadingFailed\",\n    value: function loadingFailed(id, error) {\n      var event = {\n        requestId: String(id),\n        timestamp: JSInspector.getTimestamp(),\n        type: 'Other',\n        errorText: error\n      };\n      this._agent.sendEvent('loadingFailed', event);\n    }\n  }, {\n    key: \"_getMimeType\",\n    value: function _getMimeType(headers) {\n      var contentType = headers['Content-Type'] || '';\n      return contentType.split(';')[0];\n    }\n  }]);\n  return Interceptor;\n}();\nvar NetworkAgent = function (_InspectorAgent) {\n  _inherits(NetworkAgent, _InspectorAgent);\n  var _super = _createSuper(NetworkAgent);\n  function NetworkAgent() {\n    _classCallCheck(this, NetworkAgent);\n    return _super.apply(this, arguments);\n  }\n  _createClass(NetworkAgent, [{\n    key: \"enable\",\n    value: function enable(_ref) {\n      var maxResourceBufferSize = _ref.maxResourceBufferSize,\n        maxTotalBufferSize = _ref.maxTotalBufferSize;\n      this._interceptor = new Interceptor(this);\n      XMLHttpRequest.setInterceptor(this._interceptor);\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      XMLHttpRequest.setInterceptor(null);\n      this._interceptor = null;\n    }\n  }, {\n    key: \"getResponseBody\",\n    value: function getResponseBody(_ref2) {\n      var requestId = _ref2.requestId;\n      return {\n        body: this.interceptor().getData(requestId),\n        base64Encoded: false\n      };\n    }\n  }, {\n    key: \"interceptor\",\n    value: function interceptor() {\n      if (this._interceptor) {\n        return this._interceptor;\n      } else {\n        throw Error('_interceptor can not be null');\n      }\n    }\n  }]);\n  return NetworkAgent;\n}(InspectorAgent);\nNetworkAgent.DOMAIN = 'Network';\nmodule.exports = NetworkAgent;","map":{"version":3,"names":["InspectorAgent","require","JSInspector","XMLHttpRequest","Interceptor","agent","_agent","_requests","Map","requestId","get","id","url","method","headers","String","set","request","initialPriority","event","documentURL","frameId","loaderId","timestamp","getTimestamp","initiator","type","sendEvent","status","response","statusText","requestHeaders","mimeType","_getMimeType","connectionReused","connectionId","encodedDataLength","securityState","data","existingData","concat","dataLength","length","error","errorText","contentType","split","NetworkAgent","maxResourceBufferSize","maxTotalBufferSize","_interceptor","setInterceptor","body","interceptor","getData","base64Encoded","Error","DOMAIN","module","exports"],"sources":["C:/Users/kvnem/ConvergentApp/node_modules/react-native/Libraries/JSInspector/NetworkAgent.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n */\r\n\r\n'use strict';\r\n\r\nconst InspectorAgent = require('./InspectorAgent');\r\nconst JSInspector = require('./JSInspector');\r\nconst XMLHttpRequest = require('../Network/XMLHttpRequest');\r\n\r\nimport type EventSender from './InspectorAgent';\r\n\r\ntype RequestId = string;\r\n\r\ntype LoaderId = string;\r\ntype FrameId = string;\r\ntype Timestamp = number;\r\n\r\ntype Headers = {[string]: string};\r\n\r\n// We don't currently care about this\r\ntype ResourceTiming = null;\r\n\r\ntype ResourceType =\r\n  | 'Document'\r\n  | 'Stylesheet'\r\n  | 'Image'\r\n  | 'Media'\r\n  | 'Font'\r\n  | 'Script'\r\n  | 'TextTrack'\r\n  | 'XHR'\r\n  | 'Fetch'\r\n  | 'EventSource'\r\n  | 'WebSocket'\r\n  | 'Manifest'\r\n  | 'Other';\r\n\r\ntype SecurityState =\r\n  | 'unknown'\r\n  | 'neutral'\r\n  | 'insecure'\r\n  | 'warning'\r\n  | 'secure'\r\n  | 'info';\r\ntype BlockedReason =\r\n  | 'csp'\r\n  | 'mixed-content'\r\n  | 'origin'\r\n  | 'inspector'\r\n  | 'subresource-filter'\r\n  | 'other';\r\n\r\ntype StackTrace = null;\r\n\r\ntype Initiator = {\r\n  type: 'script' | 'other',\r\n  stackTrace?: StackTrace,\r\n  url?: string,\r\n  lineNumber?: number,\r\n  ...\r\n};\r\n\r\ntype ResourcePriority = 'VeryLow' | 'Low' | 'Medium' | 'High' | 'VeryHigh';\r\n\r\ntype Request = {\r\n  url: string,\r\n  method: string,\r\n  headers: Headers,\r\n  postData?: string,\r\n  mixedContentType?: 'blockable' | 'optionally-blockable' | 'none',\r\n  initialPriority: ResourcePriority,\r\n  ...\r\n};\r\n\r\ntype Response = {\r\n  url: string,\r\n  status: number,\r\n  statusText: string,\r\n  headers: Headers,\r\n  headersText?: string,\r\n  mimeType: string,\r\n  requestHeaders?: Headers,\r\n  requestHeadersText?: string,\r\n  connectionReused: boolean,\r\n  connectionId: number,\r\n  fromDiskCache?: boolean,\r\n  encodedDataLength: number,\r\n  timing?: ResourceTiming,\r\n  securityState: SecurityState,\r\n  ...\r\n};\r\n\r\ntype RequestWillBeSentEvent = {\r\n  requestId: RequestId,\r\n  frameId: FrameId,\r\n  loaderId: LoaderId,\r\n  documentURL: string,\r\n  request: Request,\r\n  timestamp: Timestamp,\r\n  initiator: Initiator,\r\n  redirectResponse?: Response,\r\n  // This is supposed to be optional but the inspector crashes without it,\r\n  // see https://bugs.chromium.org/p/chromium/issues/detail?id=653138\r\n  type: ResourceType,\r\n  ...\r\n};\r\n\r\ntype ResponseReceivedEvent = {\r\n  requestId: RequestId,\r\n  frameId: FrameId,\r\n  loaderId: LoaderId,\r\n  timestamp: Timestamp,\r\n  type: ResourceType,\r\n  response: Response,\r\n  ...\r\n};\r\n\r\ntype DataReceived = {\r\n  requestId: RequestId,\r\n  timestamp: Timestamp,\r\n  dataLength: number,\r\n  encodedDataLength: number,\r\n  ...\r\n};\r\n\r\ntype LoadingFinishedEvent = {\r\n  requestId: RequestId,\r\n  timestamp: Timestamp,\r\n  encodedDataLength: number,\r\n  ...\r\n};\r\n\r\ntype LoadingFailedEvent = {\r\n  requestId: RequestId,\r\n  timestamp: Timestamp,\r\n  type: ResourceType,\r\n  errorText: string,\r\n  canceled?: boolean,\r\n  blockedReason?: BlockedReason,\r\n  ...\r\n};\r\n\r\nclass Interceptor {\r\n  _agent: NetworkAgent;\r\n  _requests: Map<string, string>;\r\n\r\n  constructor(agent: NetworkAgent) {\r\n    this._agent = agent;\r\n    this._requests = new Map();\r\n  }\r\n\r\n  getData(requestId: string): ?string {\r\n    return this._requests.get(requestId);\r\n  }\r\n\r\n  requestSent(id: number, url: string, method: string, headers: Headers) {\r\n    const requestId = String(id);\r\n    this._requests.set(requestId, '');\r\n\r\n    const request: Request = {\r\n      url,\r\n      method,\r\n      headers,\r\n      initialPriority: 'Medium',\r\n    };\r\n    const event: RequestWillBeSentEvent = {\r\n      requestId,\r\n      documentURL: '',\r\n      frameId: '1',\r\n      loaderId: '1',\r\n      request,\r\n      timestamp: JSInspector.getTimestamp(),\r\n      initiator: {\r\n        // TODO(blom): Get stack trace\r\n        // If type is 'script' the inspector will try to execute\r\n        // `stack.callFrames[0]`\r\n        type: 'other',\r\n      },\r\n      type: 'Other',\r\n    };\r\n    this._agent.sendEvent('requestWillBeSent', event);\r\n  }\r\n\r\n  responseReceived(id: number, url: string, status: number, headers: Headers) {\r\n    const requestId = String(id);\r\n    const response: Response = {\r\n      url,\r\n      status,\r\n      statusText: String(status),\r\n      headers,\r\n      // TODO(blom) refined headers, can we get this?\r\n      requestHeaders: {},\r\n      mimeType: this._getMimeType(headers),\r\n      connectionReused: false,\r\n      connectionId: -1,\r\n      encodedDataLength: 0,\r\n      securityState: 'unknown',\r\n    };\r\n\r\n    const event: ResponseReceivedEvent = {\r\n      requestId,\r\n      frameId: '1',\r\n      loaderId: '1',\r\n      timestamp: JSInspector.getTimestamp(),\r\n      type: 'Other',\r\n      response,\r\n    };\r\n    this._agent.sendEvent('responseReceived', event);\r\n  }\r\n\r\n  dataReceived(id: number, data: string) {\r\n    const requestId = String(id);\r\n    const existingData = this._requests.get(requestId) || '';\r\n    this._requests.set(requestId, existingData.concat(data));\r\n    const event: DataReceived = {\r\n      requestId,\r\n      timestamp: JSInspector.getTimestamp(),\r\n      dataLength: data.length,\r\n      encodedDataLength: data.length,\r\n    };\r\n    this._agent.sendEvent('dataReceived', event);\r\n  }\r\n\r\n  loadingFinished(id: number, encodedDataLength: number) {\r\n    const event: LoadingFinishedEvent = {\r\n      requestId: String(id),\r\n      timestamp: JSInspector.getTimestamp(),\r\n      encodedDataLength: encodedDataLength,\r\n    };\r\n    this._agent.sendEvent('loadingFinished', event);\r\n  }\r\n\r\n  loadingFailed(id: number, error: string) {\r\n    const event: LoadingFailedEvent = {\r\n      requestId: String(id),\r\n      timestamp: JSInspector.getTimestamp(),\r\n      type: 'Other',\r\n      errorText: error,\r\n    };\r\n    this._agent.sendEvent('loadingFailed', event);\r\n  }\r\n\r\n  _getMimeType(headers: Headers): string {\r\n    const contentType = headers['Content-Type'] || '';\r\n    return contentType.split(';')[0];\r\n  }\r\n}\r\n\r\ntype EnableArgs = {\r\n  maxResourceBufferSize?: number,\r\n  maxTotalBufferSize?: number,\r\n  ...\r\n};\r\n\r\nclass NetworkAgent extends InspectorAgent {\r\n  static DOMAIN: $TEMPORARY$string<'Network'> = 'Network';\r\n\r\n  _sendEvent: EventSender;\r\n  _interceptor: ?Interceptor;\r\n\r\n  enable({maxResourceBufferSize, maxTotalBufferSize}: EnableArgs) {\r\n    this._interceptor = new Interceptor(this);\r\n    XMLHttpRequest.setInterceptor(this._interceptor);\r\n  }\r\n\r\n  disable() {\r\n    XMLHttpRequest.setInterceptor(null);\r\n    this._interceptor = null;\r\n  }\r\n\r\n  getResponseBody({requestId}: {requestId: RequestId, ...}): {\r\n    body: ?string,\r\n    base64Encoded: boolean,\r\n    ...\r\n  } {\r\n    return {body: this.interceptor().getData(requestId), base64Encoded: false};\r\n  }\r\n\r\n  interceptor(): Interceptor {\r\n    if (this._interceptor) {\r\n      return this._interceptor;\r\n    } else {\r\n      throw Error('_interceptor can not be null');\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = NetworkAgent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}