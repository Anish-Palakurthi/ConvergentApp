{"ast":null,"code":"\n\n'use strict';\n\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar BlobManager = require(\"../Blob/BlobManager\");\nvar GlobalPerformanceLogger = require(\"../Utilities/GlobalPerformanceLogger\");\nvar RCTNetworking = require(\"./RCTNetworking\");\nvar base64 = require('base64-js');\nvar EventTarget = require('event-target-shim');\nvar invariant = require('invariant');\nvar DEBUG_NETWORK_SEND_DELAY = false;\n\nif (BlobManager.isAvailable) {\n  BlobManager.addNetworkingHandler();\n}\nvar UNSENT = 0;\nvar OPENED = 1;\nvar HEADERS_RECEIVED = 2;\nvar LOADING = 3;\nvar DONE = 4;\nvar SUPPORTED_RESPONSE_TYPES = {\n  arraybuffer: typeof global.ArrayBuffer === 'function',\n  blob: typeof global.Blob === 'function',\n  document: false,\n  json: true,\n  text: true,\n  '': true\n};\nvar REQUEST_EVENTS = ['abort', 'error', 'load', 'loadstart', 'progress', 'timeout', 'loadend'];\nvar XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');\nvar XMLHttpRequestEventTarget = function (_ref) {\n  _inherits(XMLHttpRequestEventTarget, _ref);\n  var _super = _createSuper(XMLHttpRequestEventTarget);\n  function XMLHttpRequestEventTarget() {\n    _classCallCheck(this, XMLHttpRequestEventTarget);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(XMLHttpRequestEventTarget);\n}(EventTarget.apply(void 0, REQUEST_EVENTS));\nvar XMLHttpRequest = function (_ref2) {\n  _inherits(XMLHttpRequest, _ref2);\n  var _super2 = _createSuper(XMLHttpRequest);\n  function XMLHttpRequest() {\n    var _this;\n    _classCallCheck(this, XMLHttpRequest);\n    _this = _super2.call(this);\n    _this.UNSENT = UNSENT;\n    _this.OPENED = OPENED;\n    _this.HEADERS_RECEIVED = HEADERS_RECEIVED;\n    _this.LOADING = LOADING;\n    _this.DONE = DONE;\n    _this.readyState = UNSENT;\n    _this.status = 0;\n    _this.timeout = 0;\n    _this.withCredentials = true;\n    _this.upload = new XMLHttpRequestEventTarget();\n    _this._aborted = false;\n    _this._hasError = false;\n    _this._method = null;\n    _this._perfKey = null;\n    _this._response = '';\n    _this._url = null;\n    _this._timedOut = false;\n    _this._trackingName = 'unknown';\n    _this._incrementalEvents = false;\n    _this._performanceLogger = GlobalPerformanceLogger;\n    _this._reset();\n    return _this;\n  }\n  _createClass(XMLHttpRequest, [{\n    key: \"_reset\",\n    value: function _reset() {\n      this.readyState = this.UNSENT;\n      this.responseHeaders = undefined;\n      this.status = 0;\n      delete this.responseURL;\n      this._requestId = null;\n      this._cachedResponse = undefined;\n      this._hasError = false;\n      this._headers = {};\n      this._response = '';\n      this._responseType = '';\n      this._sent = false;\n      this._lowerCaseResponseHeaders = {};\n      this._clearSubscriptions();\n      this._timedOut = false;\n    }\n  }, {\n    key: \"responseType\",\n    get: function get() {\n      return this._responseType;\n    },\n    set: function set(responseType) {\n      if (this._sent) {\n        throw new Error(\"Failed to set the 'responseType' property on 'XMLHttpRequest': The \" + 'response type cannot be set after the request has been sent.');\n      }\n      if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {\n        console.warn(\"The provided value '\" + responseType + \"' is not a valid 'responseType'.\");\n        return;\n      }\n\n      invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', \"The provided value '\" + responseType + \"' is unsupported in this environment.\");\n      if (responseType === 'blob') {\n        invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');\n      }\n      this._responseType = responseType;\n    }\n  }, {\n    key: \"responseText\",\n    get: function get() {\n      if (this._responseType !== '' && this._responseType !== 'text') {\n        throw new Error(\"The 'responseText' property is only available if 'responseType' \" + (\"is set to '' or 'text', but it is '\" + this._responseType + \"'.\"));\n      }\n      if (this.readyState < LOADING) {\n        return '';\n      }\n      return this._response;\n    }\n  }, {\n    key: \"response\",\n    get: function get() {\n      var responseType = this.responseType;\n      if (responseType === '' || responseType === 'text') {\n        return this.readyState < LOADING || this._hasError ? '' : this._response;\n      }\n      if (this.readyState !== DONE) {\n        return null;\n      }\n      if (this._cachedResponse !== undefined) {\n        return this._cachedResponse;\n      }\n      switch (responseType) {\n        case 'document':\n          this._cachedResponse = null;\n          break;\n        case 'arraybuffer':\n          this._cachedResponse = base64.toByteArray(this._response).buffer;\n          break;\n        case 'blob':\n          if (typeof this._response === 'object' && this._response) {\n            this._cachedResponse = BlobManager.createFromOptions(this._response);\n          } else if (this._response === '') {\n            this._cachedResponse = BlobManager.createFromParts([]);\n          } else {\n            throw new Error(\"Invalid response for blob: \" + this._response);\n          }\n          break;\n        case 'json':\n          try {\n            this._cachedResponse = JSON.parse(this._response);\n          } catch (_) {\n            this._cachedResponse = null;\n          }\n          break;\n        default:\n          this._cachedResponse = null;\n      }\n      return this._cachedResponse;\n    }\n\n  }, {\n    key: \"__didCreateRequest\",\n    value:\n    function __didCreateRequest(requestId) {\n      this._requestId = requestId;\n      XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);\n    }\n\n  }, {\n    key: \"__didUploadProgress\",\n    value:\n    function __didUploadProgress(requestId, progress, total) {\n      if (requestId === this._requestId) {\n        this.upload.dispatchEvent({\n          type: 'progress',\n          lengthComputable: true,\n          loaded: progress,\n          total: total\n        });\n      }\n    }\n  }, {\n    key: \"__didReceiveResponse\",\n    value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {\n      if (requestId === this._requestId) {\n        this._perfKey != null && this._performanceLogger.stopTimespan(this._perfKey);\n        this.status = status;\n        this.setResponseHeaders(responseHeaders);\n        this.setReadyState(this.HEADERS_RECEIVED);\n        if (responseURL || responseURL === '') {\n          this.responseURL = responseURL;\n        } else {\n          delete this.responseURL;\n        }\n        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});\n      }\n    }\n  }, {\n    key: \"__didReceiveData\",\n    value: function __didReceiveData(requestId, response) {\n      if (requestId !== this._requestId) {\n        return;\n      }\n      this._response = response;\n      this._cachedResponse = undefined;\n      this.setReadyState(this.LOADING);\n      XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);\n    }\n  }, {\n    key: \"__didReceiveIncrementalData\",\n    value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {\n      if (requestId !== this._requestId) {\n        return;\n      }\n      if (!this._response) {\n        this._response = responseText;\n      } else {\n        this._response += responseText;\n      }\n      XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);\n      this.setReadyState(this.LOADING);\n      this.__didReceiveDataProgress(requestId, progress, total);\n    }\n  }, {\n    key: \"__didReceiveDataProgress\",\n    value: function __didReceiveDataProgress(requestId, loaded, total) {\n      if (requestId !== this._requestId) {\n        return;\n      }\n      this.dispatchEvent({\n        type: 'progress',\n        lengthComputable: total >= 0,\n        loaded: loaded,\n        total: total\n      });\n    }\n\n  }, {\n    key: \"__didCompleteResponse\",\n    value:\n    function __didCompleteResponse(requestId, error, timeOutError) {\n      if (requestId === this._requestId) {\n        if (error) {\n          if (this._responseType === '' || this._responseType === 'text') {\n            this._response = error;\n          }\n          this._hasError = true;\n          if (timeOutError) {\n            this._timedOut = true;\n          }\n        }\n        this._clearSubscriptions();\n        this._requestId = null;\n        this.setReadyState(this.DONE);\n        if (error) {\n          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);\n        } else {\n          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);\n        }\n      }\n    }\n  }, {\n    key: \"_clearSubscriptions\",\n    value: function _clearSubscriptions() {\n      (this._subscriptions || []).forEach(function (sub) {\n        if (sub) {\n          sub.remove();\n        }\n      });\n      this._subscriptions = [];\n    }\n  }, {\n    key: \"getAllResponseHeaders\",\n    value: function getAllResponseHeaders() {\n      if (!this.responseHeaders) {\n        return null;\n      }\n\n      var responseHeaders = this.responseHeaders;\n      var unsortedHeaders = new Map();\n      for (var rawHeaderName of Object.keys(responseHeaders)) {\n        var headerValue = responseHeaders[rawHeaderName];\n        var lowerHeaderName = rawHeaderName.toLowerCase();\n        var header = unsortedHeaders.get(lowerHeaderName);\n        if (header) {\n          header.headerValue += ', ' + headerValue;\n          unsortedHeaders.set(lowerHeaderName, header);\n        } else {\n          unsortedHeaders.set(lowerHeaderName, {\n            lowerHeaderName: lowerHeaderName,\n            upperHeaderName: rawHeaderName.toUpperCase(),\n            headerValue: headerValue\n          });\n        }\n      }\n\n      var sortedHeaders = _toConsumableArray(unsortedHeaders.values()).sort(function (a, b) {\n        if (a.upperHeaderName < b.upperHeaderName) {\n          return -1;\n        }\n        if (a.upperHeaderName > b.upperHeaderName) {\n          return 1;\n        }\n        return 0;\n      });\n\n      return sortedHeaders.map(function (header) {\n        return header.lowerHeaderName + ': ' + header.headerValue;\n      }).join('\\r\\n') + '\\r\\n';\n    }\n  }, {\n    key: \"getResponseHeader\",\n    value: function getResponseHeader(header) {\n      var value = this._lowerCaseResponseHeaders[header.toLowerCase()];\n      return value !== undefined ? value : null;\n    }\n  }, {\n    key: \"setRequestHeader\",\n    value: function setRequestHeader(header, value) {\n      if (this.readyState !== this.OPENED) {\n        throw new Error('Request has not been opened');\n      }\n      this._headers[header.toLowerCase()] = String(value);\n    }\n\n  }, {\n    key: \"setTrackingName\",\n    value:\n    function setTrackingName(trackingName) {\n      this._trackingName = trackingName;\n      return this;\n    }\n\n  }, {\n    key: \"setPerformanceLogger\",\n    value:\n    function setPerformanceLogger(performanceLogger) {\n      this._performanceLogger = performanceLogger;\n      return this;\n    }\n  }, {\n    key: \"open\",\n    value: function open(method, url, async) {\n      if (this.readyState !== this.UNSENT) {\n        throw new Error('Cannot open, already sending');\n      }\n      if (async !== undefined && !async) {\n        throw new Error('Synchronous http requests are not supported');\n      }\n      if (!url) {\n        throw new Error('Cannot load an empty url');\n      }\n      this._method = method.toUpperCase();\n      this._url = url;\n      this._aborted = false;\n      this.setReadyState(this.OPENED);\n    }\n  }, {\n    key: \"send\",\n    value: function send(data) {\n      var _this2 = this;\n      if (this.readyState !== this.OPENED) {\n        throw new Error('Request has not been opened');\n      }\n      if (this._sent) {\n        throw new Error('Request has already been sent');\n      }\n      this._sent = true;\n      var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;\n      this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', function (args) {\n        return _this2.__didUploadProgress.apply(_this2, _toConsumableArray(args));\n      }));\n      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', function (args) {\n        return _this2.__didReceiveResponse.apply(_this2, _toConsumableArray(args));\n      }));\n      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', function (args) {\n        return _this2.__didReceiveData.apply(_this2, _toConsumableArray(args));\n      }));\n      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', function (args) {\n        return _this2.__didReceiveIncrementalData.apply(_this2, _toConsumableArray(args));\n      }));\n      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', function (args) {\n        return _this2.__didReceiveDataProgress.apply(_this2, _toConsumableArray(args));\n      }));\n      this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', function (args) {\n        return _this2.__didCompleteResponse.apply(_this2, _toConsumableArray(args));\n      }));\n      var nativeResponseType = 'text';\n      if (this._responseType === 'arraybuffer') {\n        nativeResponseType = 'base64';\n      }\n      if (this._responseType === 'blob') {\n        nativeResponseType = 'blob';\n      }\n      var doSend = function doSend() {\n        var friendlyName = _this2._trackingName !== 'unknown' ? _this2._trackingName : _this2._url;\n        _this2._perfKey = 'network_XMLHttpRequest_' + String(friendlyName);\n        _this2._performanceLogger.startTimespan(_this2._perfKey);\n        invariant(_this2._method, 'XMLHttpRequest method needs to be defined (%s).', friendlyName);\n        invariant(_this2._url, 'XMLHttpRequest URL needs to be defined (%s).', friendlyName);\n        RCTNetworking.sendRequest(_this2._method, _this2._trackingName, _this2._url, _this2._headers, data,\n        nativeResponseType, incrementalEvents, _this2.timeout,\n        _this2.__didCreateRequest.bind(_this2), _this2.withCredentials);\n      };\n      if (DEBUG_NETWORK_SEND_DELAY) {\n        setTimeout(doSend, DEBUG_NETWORK_SEND_DELAY);\n      } else {\n        doSend();\n      }\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      this._aborted = true;\n      if (this._requestId) {\n        RCTNetworking.abortRequest(this._requestId);\n      }\n      if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {\n        this._reset();\n        this.setReadyState(this.DONE);\n      }\n      this._reset();\n    }\n  }, {\n    key: \"setResponseHeaders\",\n    value: function setResponseHeaders(responseHeaders) {\n      this.responseHeaders = responseHeaders || null;\n      var headers = responseHeaders || {};\n      this._lowerCaseResponseHeaders = Object.keys(headers).reduce(function (lcaseHeaders, headerName) {\n        lcaseHeaders[headerName.toLowerCase()] = headers[headerName];\n        return lcaseHeaders;\n      }, {});\n    }\n  }, {\n    key: \"setReadyState\",\n    value: function setReadyState(newState) {\n      this.readyState = newState;\n      this.dispatchEvent({\n        type: 'readystatechange'\n      });\n      if (newState === this.DONE) {\n        if (this._aborted) {\n          this.dispatchEvent({\n            type: 'abort'\n          });\n        } else if (this._hasError) {\n          if (this._timedOut) {\n            this.dispatchEvent({\n              type: 'timeout'\n            });\n          } else {\n            this.dispatchEvent({\n              type: 'error'\n            });\n          }\n        } else {\n          this.dispatchEvent({\n            type: 'load'\n          });\n        }\n        this.dispatchEvent({\n          type: 'loadend'\n        });\n      }\n    }\n\n  }, {\n    key: \"addEventListener\",\n    value:\n    function addEventListener(type, listener) {\n      if (type === 'readystatechange' || type === 'progress') {\n        this._incrementalEvents = true;\n      }\n      _get(_getPrototypeOf(XMLHttpRequest.prototype), \"addEventListener\", this).call(this, type, listener);\n    }\n  }], [{\n    key: \"setInterceptor\",\n    value: function setInterceptor(interceptor) {\n      XMLHttpRequest._interceptor = interceptor;\n    }\n  }]);\n  return XMLHttpRequest;\n}(EventTarget.apply(void 0, _toConsumableArray(XHR_EVENTS)));\nXMLHttpRequest.UNSENT = UNSENT;\nXMLHttpRequest.OPENED = OPENED;\nXMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;\nXMLHttpRequest.LOADING = LOADING;\nXMLHttpRequest.DONE = DONE;\nXMLHttpRequest._interceptor = null;\nmodule.exports = XMLHttpRequest;","map":{"version":3,"names":["BlobManager","require","GlobalPerformanceLogger","RCTNetworking","base64","EventTarget","invariant","DEBUG_NETWORK_SEND_DELAY","isAvailable","addNetworkingHandler","UNSENT","OPENED","HEADERS_RECEIVED","LOADING","DONE","SUPPORTED_RESPONSE_TYPES","arraybuffer","global","ArrayBuffer","blob","Blob","document","json","text","REQUEST_EVENTS","XHR_EVENTS","concat","XMLHttpRequestEventTarget","XMLHttpRequest","readyState","status","timeout","withCredentials","upload","_aborted","_hasError","_method","_perfKey","_response","_url","_timedOut","_trackingName","_incrementalEvents","_performanceLogger","_reset","responseHeaders","undefined","responseURL","_requestId","_cachedResponse","_headers","_responseType","_sent","_lowerCaseResponseHeaders","_clearSubscriptions","responseType","Error","hasOwnProperty","console","warn","toByteArray","buffer","createFromOptions","createFromParts","JSON","parse","_","requestId","_interceptor","requestSent","progress","total","dispatchEvent","type","lengthComputable","loaded","stopTimespan","setResponseHeaders","setReadyState","responseReceived","response","dataReceived","responseText","__didReceiveDataProgress","error","timeOutError","loadingFailed","loadingFinished","length","_subscriptions","forEach","sub","remove","unsortedHeaders","Map","rawHeaderName","Object","keys","headerValue","lowerHeaderName","toLowerCase","header","get","set","upperHeaderName","toUpperCase","sortedHeaders","values","sort","a","b","map","join","value","String","trackingName","performanceLogger","method","url","async","data","incrementalEvents","onreadystatechange","onprogress","push","addListener","args","__didUploadProgress","__didReceiveResponse","__didReceiveData","__didReceiveIncrementalData","__didCompleteResponse","nativeResponseType","doSend","friendlyName","startTimespan","sendRequest","__didCreateRequest","bind","setTimeout","abortRequest","headers","reduce","lcaseHeaders","headerName","newState","listener","interceptor","module","exports"],"sources":["C:/Users/kvnem/ConvergentApp/node_modules/react-native/Libraries/Network/XMLHttpRequest.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n */\r\n\r\n'use strict';\r\n\r\nimport type {IPerformanceLogger} from '../Utilities/createPerformanceLogger';\r\n\r\nimport {type EventSubscription} from '../vendor/emitter/EventEmitter';\r\n\r\nconst BlobManager = require('../Blob/BlobManager');\r\nconst GlobalPerformanceLogger = require('../Utilities/GlobalPerformanceLogger');\r\nconst RCTNetworking = require('./RCTNetworking');\r\nconst base64 = require('base64-js');\r\nconst EventTarget = require('event-target-shim');\r\nconst invariant = require('invariant');\r\n\r\nconst DEBUG_NETWORK_SEND_DELAY: false = false; // Set to a number of milliseconds when debugging\r\n\r\nexport type NativeResponseType = 'base64' | 'blob' | 'text';\r\nexport type ResponseType =\r\n  | ''\r\n  | 'arraybuffer'\r\n  | 'blob'\r\n  | 'document'\r\n  | 'json'\r\n  | 'text';\r\nexport type Response = ?Object | string;\r\n\r\ntype XHRInterceptor = interface {\r\n  requestSent(id: number, url: string, method: string, headers: Object): void,\r\n  responseReceived(\r\n    id: number,\r\n    url: string,\r\n    status: number,\r\n    headers: Object,\r\n  ): void,\r\n  dataReceived(id: number, data: string): void,\r\n  loadingFinished(id: number, encodedDataLength: number): void,\r\n  loadingFailed(id: number, error: string): void,\r\n};\r\n\r\n// The native blob module is optional so inject it here if available.\r\nif (BlobManager.isAvailable) {\r\n  BlobManager.addNetworkingHandler();\r\n}\r\n\r\nconst UNSENT = 0;\r\nconst OPENED = 1;\r\nconst HEADERS_RECEIVED = 2;\r\nconst LOADING = 3;\r\nconst DONE = 4;\r\n\r\nconst SUPPORTED_RESPONSE_TYPES = {\r\n  arraybuffer: typeof global.ArrayBuffer === 'function',\r\n  blob: typeof global.Blob === 'function',\r\n  document: false,\r\n  json: true,\r\n  text: true,\r\n  '': true,\r\n};\r\n\r\nconst REQUEST_EVENTS = [\r\n  'abort',\r\n  'error',\r\n  'load',\r\n  'loadstart',\r\n  'progress',\r\n  'timeout',\r\n  'loadend',\r\n];\r\n\r\nconst XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');\r\n\r\nclass XMLHttpRequestEventTarget extends (EventTarget(...REQUEST_EVENTS): any) {\r\n  onload: ?Function;\r\n  onloadstart: ?Function;\r\n  onprogress: ?Function;\r\n  ontimeout: ?Function;\r\n  onerror: ?Function;\r\n  onabort: ?Function;\r\n  onloadend: ?Function;\r\n}\r\n\r\n/**\r\n * Shared base for platform-specific XMLHttpRequest implementations.\r\n */\r\nclass XMLHttpRequest extends (EventTarget(...XHR_EVENTS): any) {\r\n  static UNSENT: number = UNSENT;\r\n  static OPENED: number = OPENED;\r\n  static HEADERS_RECEIVED: number = HEADERS_RECEIVED;\r\n  static LOADING: number = LOADING;\r\n  static DONE: number = DONE;\r\n\r\n  static _interceptor: ?XHRInterceptor = null;\r\n\r\n  UNSENT: number = UNSENT;\r\n  OPENED: number = OPENED;\r\n  HEADERS_RECEIVED: number = HEADERS_RECEIVED;\r\n  LOADING: number = LOADING;\r\n  DONE: number = DONE;\r\n\r\n  // EventTarget automatically initializes these to `null`.\r\n  onload: ?Function;\r\n  onloadstart: ?Function;\r\n  onprogress: ?Function;\r\n  ontimeout: ?Function;\r\n  onerror: ?Function;\r\n  onabort: ?Function;\r\n  onloadend: ?Function;\r\n  onreadystatechange: ?Function;\r\n\r\n  readyState: number = UNSENT;\r\n  responseHeaders: ?Object;\r\n  status: number = 0;\r\n  timeout: number = 0;\r\n  responseURL: ?string;\r\n  withCredentials: boolean = true;\r\n\r\n  upload: XMLHttpRequestEventTarget = new XMLHttpRequestEventTarget();\r\n\r\n  _requestId: ?number;\r\n  _subscriptions: Array<EventSubscription>;\r\n\r\n  _aborted: boolean = false;\r\n  _cachedResponse: Response;\r\n  _hasError: boolean = false;\r\n  _headers: Object;\r\n  _lowerCaseResponseHeaders: Object;\r\n  _method: ?string = null;\r\n  _perfKey: ?string = null;\r\n  _responseType: ResponseType;\r\n  _response: string = '';\r\n  _sent: boolean;\r\n  _url: ?string = null;\r\n  _timedOut: boolean = false;\r\n  _trackingName: string = 'unknown';\r\n  _incrementalEvents: boolean = false;\r\n  _performanceLogger: IPerformanceLogger = GlobalPerformanceLogger;\r\n\r\n  static setInterceptor(interceptor: ?XHRInterceptor) {\r\n    XMLHttpRequest._interceptor = interceptor;\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this._reset();\r\n  }\r\n\r\n  _reset(): void {\r\n    this.readyState = this.UNSENT;\r\n    this.responseHeaders = undefined;\r\n    this.status = 0;\r\n    delete this.responseURL;\r\n\r\n    this._requestId = null;\r\n\r\n    this._cachedResponse = undefined;\r\n    this._hasError = false;\r\n    this._headers = {};\r\n    this._response = '';\r\n    this._responseType = '';\r\n    this._sent = false;\r\n    this._lowerCaseResponseHeaders = {};\r\n\r\n    this._clearSubscriptions();\r\n    this._timedOut = false;\r\n  }\r\n\r\n  get responseType(): ResponseType {\r\n    return this._responseType;\r\n  }\r\n\r\n  set responseType(responseType: ResponseType): void {\r\n    if (this._sent) {\r\n      throw new Error(\r\n        \"Failed to set the 'responseType' property on 'XMLHttpRequest': The \" +\r\n          'response type cannot be set after the request has been sent.',\r\n      );\r\n    }\r\n    if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {\r\n      console.warn(\r\n        `The provided value '${responseType}' is not a valid 'responseType'.`,\r\n      );\r\n      return;\r\n    }\r\n\r\n    // redboxes early, e.g. for 'arraybuffer' on ios 7\r\n    invariant(\r\n      SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document',\r\n      `The provided value '${responseType}' is unsupported in this environment.`,\r\n    );\r\n\r\n    if (responseType === 'blob') {\r\n      invariant(\r\n        BlobManager.isAvailable,\r\n        'Native module BlobModule is required for blob support',\r\n      );\r\n    }\r\n    this._responseType = responseType;\r\n  }\r\n\r\n  get responseText(): string {\r\n    if (this._responseType !== '' && this._responseType !== 'text') {\r\n      throw new Error(\r\n        \"The 'responseText' property is only available if 'responseType' \" +\r\n          `is set to '' or 'text', but it is '${this._responseType}'.`,\r\n      );\r\n    }\r\n    if (this.readyState < LOADING) {\r\n      return '';\r\n    }\r\n    return this._response;\r\n  }\r\n\r\n  get response(): Response {\r\n    const {responseType} = this;\r\n    if (responseType === '' || responseType === 'text') {\r\n      return this.readyState < LOADING || this._hasError ? '' : this._response;\r\n    }\r\n\r\n    if (this.readyState !== DONE) {\r\n      return null;\r\n    }\r\n\r\n    if (this._cachedResponse !== undefined) {\r\n      return this._cachedResponse;\r\n    }\r\n\r\n    switch (responseType) {\r\n      case 'document':\r\n        this._cachedResponse = null;\r\n        break;\r\n\r\n      case 'arraybuffer':\r\n        this._cachedResponse = base64.toByteArray(this._response).buffer;\r\n        break;\r\n\r\n      case 'blob':\r\n        if (typeof this._response === 'object' && this._response) {\r\n          this._cachedResponse = BlobManager.createFromOptions(this._response);\r\n        } else if (this._response === '') {\r\n          this._cachedResponse = BlobManager.createFromParts([]);\r\n        } else {\r\n          throw new Error(`Invalid response for blob: ${this._response}`);\r\n        }\r\n        break;\r\n\r\n      case 'json':\r\n        try {\r\n          this._cachedResponse = JSON.parse(this._response);\r\n        } catch (_) {\r\n          this._cachedResponse = null;\r\n        }\r\n        break;\r\n\r\n      default:\r\n        this._cachedResponse = null;\r\n    }\r\n\r\n    return this._cachedResponse;\r\n  }\r\n\r\n  // exposed for testing\r\n  __didCreateRequest(requestId: number): void {\r\n    this._requestId = requestId;\r\n\r\n    XMLHttpRequest._interceptor &&\r\n      XMLHttpRequest._interceptor.requestSent(\r\n        requestId,\r\n        this._url || '',\r\n        this._method || 'GET',\r\n        this._headers,\r\n      );\r\n  }\r\n\r\n  // exposed for testing\r\n  __didUploadProgress(\r\n    requestId: number,\r\n    progress: number,\r\n    total: number,\r\n  ): void {\r\n    if (requestId === this._requestId) {\r\n      this.upload.dispatchEvent({\r\n        type: 'progress',\r\n        lengthComputable: true,\r\n        loaded: progress,\r\n        total,\r\n      });\r\n    }\r\n  }\r\n\r\n  __didReceiveResponse(\r\n    requestId: number,\r\n    status: number,\r\n    responseHeaders: ?Object,\r\n    responseURL: ?string,\r\n  ): void {\r\n    if (requestId === this._requestId) {\r\n      this._perfKey != null &&\r\n        this._performanceLogger.stopTimespan(this._perfKey);\r\n      this.status = status;\r\n      this.setResponseHeaders(responseHeaders);\r\n      this.setReadyState(this.HEADERS_RECEIVED);\r\n      if (responseURL || responseURL === '') {\r\n        this.responseURL = responseURL;\r\n      } else {\r\n        delete this.responseURL;\r\n      }\r\n\r\n      XMLHttpRequest._interceptor &&\r\n        XMLHttpRequest._interceptor.responseReceived(\r\n          requestId,\r\n          responseURL || this._url || '',\r\n          status,\r\n          responseHeaders || {},\r\n        );\r\n    }\r\n  }\r\n\r\n  __didReceiveData(requestId: number, response: string): void {\r\n    if (requestId !== this._requestId) {\r\n      return;\r\n    }\r\n    this._response = response;\r\n    this._cachedResponse = undefined; // force lazy recomputation\r\n    this.setReadyState(this.LOADING);\r\n\r\n    XMLHttpRequest._interceptor &&\r\n      XMLHttpRequest._interceptor.dataReceived(requestId, response);\r\n  }\r\n\r\n  __didReceiveIncrementalData(\r\n    requestId: number,\r\n    responseText: string,\r\n    progress: number,\r\n    total: number,\r\n  ) {\r\n    if (requestId !== this._requestId) {\r\n      return;\r\n    }\r\n    if (!this._response) {\r\n      this._response = responseText;\r\n    } else {\r\n      this._response += responseText;\r\n    }\r\n\r\n    XMLHttpRequest._interceptor &&\r\n      XMLHttpRequest._interceptor.dataReceived(requestId, responseText);\r\n\r\n    this.setReadyState(this.LOADING);\r\n    this.__didReceiveDataProgress(requestId, progress, total);\r\n  }\r\n\r\n  __didReceiveDataProgress(\r\n    requestId: number,\r\n    loaded: number,\r\n    total: number,\r\n  ): void {\r\n    if (requestId !== this._requestId) {\r\n      return;\r\n    }\r\n    this.dispatchEvent({\r\n      type: 'progress',\r\n      lengthComputable: total >= 0,\r\n      loaded,\r\n      total,\r\n    });\r\n  }\r\n\r\n  // exposed for testing\r\n  __didCompleteResponse(\r\n    requestId: number,\r\n    error: string,\r\n    timeOutError: boolean,\r\n  ): void {\r\n    if (requestId === this._requestId) {\r\n      if (error) {\r\n        if (this._responseType === '' || this._responseType === 'text') {\r\n          this._response = error;\r\n        }\r\n        this._hasError = true;\r\n        if (timeOutError) {\r\n          this._timedOut = true;\r\n        }\r\n      }\r\n      this._clearSubscriptions();\r\n      this._requestId = null;\r\n      this.setReadyState(this.DONE);\r\n\r\n      if (error) {\r\n        XMLHttpRequest._interceptor &&\r\n          XMLHttpRequest._interceptor.loadingFailed(requestId, error);\r\n      } else {\r\n        XMLHttpRequest._interceptor &&\r\n          XMLHttpRequest._interceptor.loadingFinished(\r\n            requestId,\r\n            this._response.length,\r\n          );\r\n      }\r\n    }\r\n  }\r\n\r\n  _clearSubscriptions(): void {\r\n    (this._subscriptions || []).forEach(sub => {\r\n      if (sub) {\r\n        sub.remove();\r\n      }\r\n    });\r\n    this._subscriptions = [];\r\n  }\r\n\r\n  getAllResponseHeaders(): ?string {\r\n    if (!this.responseHeaders) {\r\n      // according to the spec, return null if no response has been received\r\n      return null;\r\n    }\r\n\r\n    // Assign to non-nullable local variable.\r\n    const responseHeaders = this.responseHeaders;\r\n\r\n    const unsortedHeaders: Map<\r\n      string,\r\n      {lowerHeaderName: string, upperHeaderName: string, headerValue: string},\r\n    > = new Map();\r\n    for (const rawHeaderName of Object.keys(responseHeaders)) {\r\n      const headerValue = responseHeaders[rawHeaderName];\r\n      const lowerHeaderName = rawHeaderName.toLowerCase();\r\n      const header = unsortedHeaders.get(lowerHeaderName);\r\n      if (header) {\r\n        header.headerValue += ', ' + headerValue;\r\n        unsortedHeaders.set(lowerHeaderName, header);\r\n      } else {\r\n        unsortedHeaders.set(lowerHeaderName, {\r\n          lowerHeaderName,\r\n          upperHeaderName: rawHeaderName.toUpperCase(),\r\n          headerValue,\r\n        });\r\n      }\r\n    }\r\n\r\n    // Sort in ascending order, with a being less than b if a's name is legacy-uppercased-byte less than b's name.\r\n    const sortedHeaders = [...unsortedHeaders.values()].sort((a, b) => {\r\n      if (a.upperHeaderName < b.upperHeaderName) {\r\n        return -1;\r\n      }\r\n      if (a.upperHeaderName > b.upperHeaderName) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    });\r\n\r\n    // Combine into single text response.\r\n    return (\r\n      sortedHeaders\r\n        .map(header => {\r\n          return header.lowerHeaderName + ': ' + header.headerValue;\r\n        })\r\n        .join('\\r\\n') + '\\r\\n'\r\n    );\r\n  }\r\n\r\n  getResponseHeader(header: string): ?string {\r\n    const value = this._lowerCaseResponseHeaders[header.toLowerCase()];\r\n    return value !== undefined ? value : null;\r\n  }\r\n\r\n  setRequestHeader(header: string, value: any): void {\r\n    if (this.readyState !== this.OPENED) {\r\n      throw new Error('Request has not been opened');\r\n    }\r\n    this._headers[header.toLowerCase()] = String(value);\r\n  }\r\n\r\n  /**\r\n   * Custom extension for tracking origins of request.\r\n   */\r\n  setTrackingName(trackingName: string): XMLHttpRequest {\r\n    this._trackingName = trackingName;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Custom extension for setting a custom performance logger\r\n   */\r\n  setPerformanceLogger(performanceLogger: IPerformanceLogger): XMLHttpRequest {\r\n    this._performanceLogger = performanceLogger;\r\n    return this;\r\n  }\r\n\r\n  open(method: string, url: string, async: ?boolean): void {\r\n    /* Other optional arguments are not supported yet */\r\n    if (this.readyState !== this.UNSENT) {\r\n      throw new Error('Cannot open, already sending');\r\n    }\r\n    if (async !== undefined && !async) {\r\n      // async is default\r\n      throw new Error('Synchronous http requests are not supported');\r\n    }\r\n    if (!url) {\r\n      throw new Error('Cannot load an empty url');\r\n    }\r\n    this._method = method.toUpperCase();\r\n    this._url = url;\r\n    this._aborted = false;\r\n    this.setReadyState(this.OPENED);\r\n  }\r\n\r\n  send(data: any): void {\r\n    if (this.readyState !== this.OPENED) {\r\n      throw new Error('Request has not been opened');\r\n    }\r\n    if (this._sent) {\r\n      throw new Error('Request has already been sent');\r\n    }\r\n    this._sent = true;\r\n    const incrementalEvents =\r\n      this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;\r\n\r\n    this._subscriptions.push(\r\n      RCTNetworking.addListener('didSendNetworkData', args =>\r\n        this.__didUploadProgress(...args),\r\n      ),\r\n    );\r\n    this._subscriptions.push(\r\n      RCTNetworking.addListener('didReceiveNetworkResponse', args =>\r\n        this.__didReceiveResponse(...args),\r\n      ),\r\n    );\r\n    this._subscriptions.push(\r\n      RCTNetworking.addListener('didReceiveNetworkData', args =>\r\n        this.__didReceiveData(...args),\r\n      ),\r\n    );\r\n    this._subscriptions.push(\r\n      RCTNetworking.addListener('didReceiveNetworkIncrementalData', args =>\r\n        this.__didReceiveIncrementalData(...args),\r\n      ),\r\n    );\r\n    this._subscriptions.push(\r\n      RCTNetworking.addListener('didReceiveNetworkDataProgress', args =>\r\n        this.__didReceiveDataProgress(...args),\r\n      ),\r\n    );\r\n    this._subscriptions.push(\r\n      RCTNetworking.addListener('didCompleteNetworkResponse', args =>\r\n        this.__didCompleteResponse(...args),\r\n      ),\r\n    );\r\n\r\n    let nativeResponseType: NativeResponseType = 'text';\r\n    if (this._responseType === 'arraybuffer') {\r\n      nativeResponseType = 'base64';\r\n    }\r\n    if (this._responseType === 'blob') {\r\n      nativeResponseType = 'blob';\r\n    }\r\n\r\n    const doSend = () => {\r\n      const friendlyName =\r\n        this._trackingName !== 'unknown' ? this._trackingName : this._url;\r\n      this._perfKey = 'network_XMLHttpRequest_' + String(friendlyName);\r\n      this._performanceLogger.startTimespan(this._perfKey);\r\n      invariant(\r\n        this._method,\r\n        'XMLHttpRequest method needs to be defined (%s).',\r\n        friendlyName,\r\n      );\r\n      invariant(\r\n        this._url,\r\n        'XMLHttpRequest URL needs to be defined (%s).',\r\n        friendlyName,\r\n      );\r\n      RCTNetworking.sendRequest(\r\n        this._method,\r\n        this._trackingName,\r\n        this._url,\r\n        this._headers,\r\n        data,\r\n        /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found\r\n         * when making Flow check .android.js files. */\r\n        nativeResponseType,\r\n        incrementalEvents,\r\n        this.timeout,\r\n        // $FlowFixMe[method-unbinding] added when improving typing for this parameters\r\n        this.__didCreateRequest.bind(this),\r\n        this.withCredentials,\r\n      );\r\n    };\r\n    if (DEBUG_NETWORK_SEND_DELAY) {\r\n      setTimeout(doSend, DEBUG_NETWORK_SEND_DELAY);\r\n    } else {\r\n      doSend();\r\n    }\r\n  }\r\n\r\n  abort(): void {\r\n    this._aborted = true;\r\n    if (this._requestId) {\r\n      RCTNetworking.abortRequest(this._requestId);\r\n    }\r\n    // only call onreadystatechange if there is something to abort,\r\n    // below logic is per spec\r\n    if (\r\n      !(\r\n        this.readyState === this.UNSENT ||\r\n        (this.readyState === this.OPENED && !this._sent) ||\r\n        this.readyState === this.DONE\r\n      )\r\n    ) {\r\n      this._reset();\r\n      this.setReadyState(this.DONE);\r\n    }\r\n    // Reset again after, in case modified in handler\r\n    this._reset();\r\n  }\r\n\r\n  setResponseHeaders(responseHeaders: ?Object): void {\r\n    this.responseHeaders = responseHeaders || null;\r\n    const headers = responseHeaders || {};\r\n    this._lowerCaseResponseHeaders = Object.keys(headers).reduce<{\r\n      [string]: any,\r\n    }>((lcaseHeaders, headerName) => {\r\n      lcaseHeaders[headerName.toLowerCase()] = headers[headerName];\r\n      return lcaseHeaders;\r\n    }, {});\r\n  }\r\n\r\n  setReadyState(newState: number): void {\r\n    this.readyState = newState;\r\n    this.dispatchEvent({type: 'readystatechange'});\r\n    if (newState === this.DONE) {\r\n      if (this._aborted) {\r\n        this.dispatchEvent({type: 'abort'});\r\n      } else if (this._hasError) {\r\n        if (this._timedOut) {\r\n          this.dispatchEvent({type: 'timeout'});\r\n        } else {\r\n          this.dispatchEvent({type: 'error'});\r\n        }\r\n      } else {\r\n        this.dispatchEvent({type: 'load'});\r\n      }\r\n      this.dispatchEvent({type: 'loadend'});\r\n    }\r\n  }\r\n\r\n  /* global EventListener */\r\n  addEventListener(type: string, listener: EventListener): void {\r\n    // If we dont' have a 'readystatechange' event handler, we don't\r\n    // have to send repeated LOADING events with incremental updates\r\n    // to responseText, which will avoid a bunch of native -> JS\r\n    // bridge traffic.\r\n    if (type === 'readystatechange' || type === 'progress') {\r\n      this._incrementalEvents = true;\r\n    }\r\n    super.addEventListener(type, listener);\r\n  }\r\n}\r\n\r\nmodule.exports = XMLHttpRequest;\r\n"],"mappings":";;AAUA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMb,IAAMA,WAAW,GAAGC,OAAO,uBAAuB;AAClD,IAAMC,uBAAuB,GAAGD,OAAO,wCAAwC;AAC/E,IAAME,aAAa,GAAGF,OAAO,mBAAmB;AAChD,IAAMG,MAAM,GAAGH,OAAO,CAAC,WAAW,CAAC;AACnC,IAAMI,WAAW,GAAGJ,OAAO,CAAC,mBAAmB,CAAC;AAChD,IAAMK,SAAS,GAAGL,OAAO,CAAC,WAAW,CAAC;AAEtC,IAAMM,wBAA+B,GAAG,KAAK;;AA0B7C,IAAIP,WAAW,CAACQ,WAAW,EAAE;EAC3BR,WAAW,CAACS,oBAAoB,EAAE;AACpC;AAEA,IAAMC,MAAM,GAAG,CAAC;AAChB,IAAMC,MAAM,GAAG,CAAC;AAChB,IAAMC,gBAAgB,GAAG,CAAC;AAC1B,IAAMC,OAAO,GAAG,CAAC;AACjB,IAAMC,IAAI,GAAG,CAAC;AAEd,IAAMC,wBAAwB,GAAG;EAC/BC,WAAW,EAAE,OAAOC,MAAM,CAACC,WAAW,KAAK,UAAU;EACrDC,IAAI,EAAE,OAAOF,MAAM,CAACG,IAAI,KAAK,UAAU;EACvCC,QAAQ,EAAE,KAAK;EACfC,IAAI,EAAE,IAAI;EACVC,IAAI,EAAE,IAAI;EACV,EAAE,EAAE;AACN,CAAC;AAED,IAAMC,cAAc,GAAG,CACrB,OAAO,EACP,OAAO,EACP,MAAM,EACN,WAAW,EACX,UAAU,EACV,SAAS,EACT,SAAS,CACV;AAED,IAAMC,UAAU,GAAGD,cAAc,CAACE,MAAM,CAAC,kBAAkB,CAAC;AAAC,IAEvDC,yBAAyB;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;AAAA,EAAUtB,WAAW,eAAImB,cAAc,CAAC;AAAA,IAajEI,cAAc;EAAA;EAAA;EAyDlB,0BAAc;IAAA;IAAA;IACZ;IAAQ,MAjDVlB,MAAM,GAAWA,MAAM;IAAA,MACvBC,MAAM,GAAWA,MAAM;IAAA,MACvBC,gBAAgB,GAAWA,gBAAgB;IAAA,MAC3CC,OAAO,GAAWA,OAAO;IAAA,MACzBC,IAAI,GAAWA,IAAI;IAAA,MAYnBe,UAAU,GAAWnB,MAAM;IAAA,MAE3BoB,MAAM,GAAW,CAAC;IAAA,MAClBC,OAAO,GAAW,CAAC;IAAA,MAEnBC,eAAe,GAAY,IAAI;IAAA,MAE/BC,MAAM,GAA8B,IAAIN,yBAAyB,EAAE;IAAA,MAKnEO,QAAQ,GAAY,KAAK;IAAA,MAEzBC,SAAS,GAAY,KAAK;IAAA,MAG1BC,OAAO,GAAY,IAAI;IAAA,MACvBC,QAAQ,GAAY,IAAI;IAAA,MAExBC,SAAS,GAAW,EAAE;IAAA,MAEtBC,IAAI,GAAY,IAAI;IAAA,MACpBC,SAAS,GAAY,KAAK;IAAA,MAC1BC,aAAa,GAAW,SAAS;IAAA,MACjCC,kBAAkB,GAAY,KAAK;IAAA,MACnCC,kBAAkB,GAAuBzC,uBAAuB;IAQ9D,MAAK0C,MAAM,EAAE;IAAC;EAChB;EAAC;IAAA;IAAA,OAED,kBAAe;MACb,IAAI,CAACf,UAAU,GAAG,IAAI,CAACnB,MAAM;MAC7B,IAAI,CAACmC,eAAe,GAAGC,SAAS;MAChC,IAAI,CAAChB,MAAM,GAAG,CAAC;MACf,OAAO,IAAI,CAACiB,WAAW;MAEvB,IAAI,CAACC,UAAU,GAAG,IAAI;MAEtB,IAAI,CAACC,eAAe,GAAGH,SAAS;MAChC,IAAI,CAACX,SAAS,GAAG,KAAK;MACtB,IAAI,CAACe,QAAQ,GAAG,CAAC,CAAC;MAClB,IAAI,CAACZ,SAAS,GAAG,EAAE;MACnB,IAAI,CAACa,aAAa,GAAG,EAAE;MACvB,IAAI,CAACC,KAAK,GAAG,KAAK;MAClB,IAAI,CAACC,yBAAyB,GAAG,CAAC,CAAC;MAEnC,IAAI,CAACC,mBAAmB,EAAE;MAC1B,IAAI,CAACd,SAAS,GAAG,KAAK;IACxB;EAAC;IAAA;IAAA,KAED,eAAiC;MAC/B,OAAO,IAAI,CAACW,aAAa;IAC3B,CAAC;IAAA,KAED,aAAiBI,YAA0B,EAAQ;MACjD,IAAI,IAAI,CAACH,KAAK,EAAE;QACd,MAAM,IAAII,KAAK,CACb,qEAAqE,GACnE,8DAA8D,CACjE;MACH;MACA,IAAI,CAACzC,wBAAwB,CAAC0C,cAAc,CAACF,YAAY,CAAC,EAAE;QAC1DG,OAAO,CAACC,IAAI,0BACaJ,YAAY,sCACpC;QACD;MACF;;MAGAjD,SAAS,CACPS,wBAAwB,CAACwC,YAAY,CAAC,IAAIA,YAAY,KAAK,UAAU,2BAC9CA,YAAY,2CACpC;MAED,IAAIA,YAAY,KAAK,MAAM,EAAE;QAC3BjD,SAAS,CACPN,WAAW,CAACQ,WAAW,EACvB,uDAAuD,CACxD;MACH;MACA,IAAI,CAAC2C,aAAa,GAAGI,YAAY;IACnC;EAAC;IAAA;IAAA,KAED,eAA2B;MACzB,IAAI,IAAI,CAACJ,aAAa,KAAK,EAAE,IAAI,IAAI,CAACA,aAAa,KAAK,MAAM,EAAE;QAC9D,MAAM,IAAIK,KAAK,CACb,kEAAkE,4CAC1B,IAAI,CAACL,aAAa,QAAI,CAC/D;MACH;MACA,IAAI,IAAI,CAACtB,UAAU,GAAGhB,OAAO,EAAE;QAC7B,OAAO,EAAE;MACX;MACA,OAAO,IAAI,CAACyB,SAAS;IACvB;EAAC;IAAA;IAAA,KAED,eAAyB;MACvB,IAAOiB,YAAY,GAAI,IAAI,CAApBA,YAAY;MACnB,IAAIA,YAAY,KAAK,EAAE,IAAIA,YAAY,KAAK,MAAM,EAAE;QAClD,OAAO,IAAI,CAAC1B,UAAU,GAAGhB,OAAO,IAAI,IAAI,CAACsB,SAAS,GAAG,EAAE,GAAG,IAAI,CAACG,SAAS;MAC1E;MAEA,IAAI,IAAI,CAACT,UAAU,KAAKf,IAAI,EAAE;QAC5B,OAAO,IAAI;MACb;MAEA,IAAI,IAAI,CAACmC,eAAe,KAAKH,SAAS,EAAE;QACtC,OAAO,IAAI,CAACG,eAAe;MAC7B;MAEA,QAAQM,YAAY;QAClB,KAAK,UAAU;UACb,IAAI,CAACN,eAAe,GAAG,IAAI;UAC3B;QAEF,KAAK,aAAa;UAChB,IAAI,CAACA,eAAe,GAAG7C,MAAM,CAACwD,WAAW,CAAC,IAAI,CAACtB,SAAS,CAAC,CAACuB,MAAM;UAChE;QAEF,KAAK,MAAM;UACT,IAAI,OAAO,IAAI,CAACvB,SAAS,KAAK,QAAQ,IAAI,IAAI,CAACA,SAAS,EAAE;YACxD,IAAI,CAACW,eAAe,GAAGjD,WAAW,CAAC8D,iBAAiB,CAAC,IAAI,CAACxB,SAAS,CAAC;UACtE,CAAC,MAAM,IAAI,IAAI,CAACA,SAAS,KAAK,EAAE,EAAE;YAChC,IAAI,CAACW,eAAe,GAAGjD,WAAW,CAAC+D,eAAe,CAAC,EAAE,CAAC;UACxD,CAAC,MAAM;YACL,MAAM,IAAIP,KAAK,iCAA+B,IAAI,CAAClB,SAAS,CAAG;UACjE;UACA;QAEF,KAAK,MAAM;UACT,IAAI;YACF,IAAI,CAACW,eAAe,GAAGe,IAAI,CAACC,KAAK,CAAC,IAAI,CAAC3B,SAAS,CAAC;UACnD,CAAC,CAAC,OAAO4B,CAAC,EAAE;YACV,IAAI,CAACjB,eAAe,GAAG,IAAI;UAC7B;UACA;QAEF;UACE,IAAI,CAACA,eAAe,GAAG,IAAI;MAAC;MAGhC,OAAO,IAAI,CAACA,eAAe;IAC7B;;EAAC;IAAA;IAAA;IAGD,4BAAmBkB,SAAiB,EAAQ;MAC1C,IAAI,CAACnB,UAAU,GAAGmB,SAAS;MAE3BvC,cAAc,CAACwC,YAAY,IACzBxC,cAAc,CAACwC,YAAY,CAACC,WAAW,CACrCF,SAAS,EACT,IAAI,CAAC5B,IAAI,IAAI,EAAE,EACf,IAAI,CAACH,OAAO,IAAI,KAAK,EACrB,IAAI,CAACc,QAAQ,CACd;IACL;;EAAC;IAAA;IAAA;IAGD,6BACEiB,SAAiB,EACjBG,QAAgB,EAChBC,KAAa,EACP;MACN,IAAIJ,SAAS,KAAK,IAAI,CAACnB,UAAU,EAAE;QACjC,IAAI,CAACf,MAAM,CAACuC,aAAa,CAAC;UACxBC,IAAI,EAAE,UAAU;UAChBC,gBAAgB,EAAE,IAAI;UACtBC,MAAM,EAAEL,QAAQ;UAChBC,KAAK,EAALA;QACF,CAAC,CAAC;MACJ;IACF;EAAC;IAAA;IAAA,OAED,8BACEJ,SAAiB,EACjBrC,MAAc,EACde,eAAwB,EACxBE,WAAoB,EACd;MACN,IAAIoB,SAAS,KAAK,IAAI,CAACnB,UAAU,EAAE;QACjC,IAAI,CAACX,QAAQ,IAAI,IAAI,IACnB,IAAI,CAACM,kBAAkB,CAACiC,YAAY,CAAC,IAAI,CAACvC,QAAQ,CAAC;QACrD,IAAI,CAACP,MAAM,GAAGA,MAAM;QACpB,IAAI,CAAC+C,kBAAkB,CAAChC,eAAe,CAAC;QACxC,IAAI,CAACiC,aAAa,CAAC,IAAI,CAAClE,gBAAgB,CAAC;QACzC,IAAImC,WAAW,IAAIA,WAAW,KAAK,EAAE,EAAE;UACrC,IAAI,CAACA,WAAW,GAAGA,WAAW;QAChC,CAAC,MAAM;UACL,OAAO,IAAI,CAACA,WAAW;QACzB;QAEAnB,cAAc,CAACwC,YAAY,IACzBxC,cAAc,CAACwC,YAAY,CAACW,gBAAgB,CAC1CZ,SAAS,EACTpB,WAAW,IAAI,IAAI,CAACR,IAAI,IAAI,EAAE,EAC9BT,MAAM,EACNe,eAAe,IAAI,CAAC,CAAC,CACtB;MACL;IACF;EAAC;IAAA;IAAA,OAED,0BAAiBsB,SAAiB,EAAEa,QAAgB,EAAQ;MAC1D,IAAIb,SAAS,KAAK,IAAI,CAACnB,UAAU,EAAE;QACjC;MACF;MACA,IAAI,CAACV,SAAS,GAAG0C,QAAQ;MACzB,IAAI,CAAC/B,eAAe,GAAGH,SAAS;MAChC,IAAI,CAACgC,aAAa,CAAC,IAAI,CAACjE,OAAO,CAAC;MAEhCe,cAAc,CAACwC,YAAY,IACzBxC,cAAc,CAACwC,YAAY,CAACa,YAAY,CAACd,SAAS,EAAEa,QAAQ,CAAC;IACjE;EAAC;IAAA;IAAA,OAED,qCACEb,SAAiB,EACjBe,YAAoB,EACpBZ,QAAgB,EAChBC,KAAa,EACb;MACA,IAAIJ,SAAS,KAAK,IAAI,CAACnB,UAAU,EAAE;QACjC;MACF;MACA,IAAI,CAAC,IAAI,CAACV,SAAS,EAAE;QACnB,IAAI,CAACA,SAAS,GAAG4C,YAAY;MAC/B,CAAC,MAAM;QACL,IAAI,CAAC5C,SAAS,IAAI4C,YAAY;MAChC;MAEAtD,cAAc,CAACwC,YAAY,IACzBxC,cAAc,CAACwC,YAAY,CAACa,YAAY,CAACd,SAAS,EAAEe,YAAY,CAAC;MAEnE,IAAI,CAACJ,aAAa,CAAC,IAAI,CAACjE,OAAO,CAAC;MAChC,IAAI,CAACsE,wBAAwB,CAAChB,SAAS,EAAEG,QAAQ,EAAEC,KAAK,CAAC;IAC3D;EAAC;IAAA;IAAA,OAED,kCACEJ,SAAiB,EACjBQ,MAAc,EACdJ,KAAa,EACP;MACN,IAAIJ,SAAS,KAAK,IAAI,CAACnB,UAAU,EAAE;QACjC;MACF;MACA,IAAI,CAACwB,aAAa,CAAC;QACjBC,IAAI,EAAE,UAAU;QAChBC,gBAAgB,EAAEH,KAAK,IAAI,CAAC;QAC5BI,MAAM,EAANA,MAAM;QACNJ,KAAK,EAALA;MACF,CAAC,CAAC;IACJ;;EAAC;IAAA;IAAA;IAGD,+BACEJ,SAAiB,EACjBiB,KAAa,EACbC,YAAqB,EACf;MACN,IAAIlB,SAAS,KAAK,IAAI,CAACnB,UAAU,EAAE;QACjC,IAAIoC,KAAK,EAAE;UACT,IAAI,IAAI,CAACjC,aAAa,KAAK,EAAE,IAAI,IAAI,CAACA,aAAa,KAAK,MAAM,EAAE;YAC9D,IAAI,CAACb,SAAS,GAAG8C,KAAK;UACxB;UACA,IAAI,CAACjD,SAAS,GAAG,IAAI;UACrB,IAAIkD,YAAY,EAAE;YAChB,IAAI,CAAC7C,SAAS,GAAG,IAAI;UACvB;QACF;QACA,IAAI,CAACc,mBAAmB,EAAE;QAC1B,IAAI,CAACN,UAAU,GAAG,IAAI;QACtB,IAAI,CAAC8B,aAAa,CAAC,IAAI,CAAChE,IAAI,CAAC;QAE7B,IAAIsE,KAAK,EAAE;UACTxD,cAAc,CAACwC,YAAY,IACzBxC,cAAc,CAACwC,YAAY,CAACkB,aAAa,CAACnB,SAAS,EAAEiB,KAAK,CAAC;QAC/D,CAAC,MAAM;UACLxD,cAAc,CAACwC,YAAY,IACzBxC,cAAc,CAACwC,YAAY,CAACmB,eAAe,CACzCpB,SAAS,EACT,IAAI,CAAC7B,SAAS,CAACkD,MAAM,CACtB;QACL;MACF;IACF;EAAC;IAAA;IAAA,OAED,+BAA4B;MAC1B,CAAC,IAAI,CAACC,cAAc,IAAI,EAAE,EAAEC,OAAO,CAAC,UAAAC,GAAG,EAAI;QACzC,IAAIA,GAAG,EAAE;UACPA,GAAG,CAACC,MAAM,EAAE;QACd;MACF,CAAC,CAAC;MACF,IAAI,CAACH,cAAc,GAAG,EAAE;IAC1B;EAAC;IAAA;IAAA,OAED,iCAAiC;MAC/B,IAAI,CAAC,IAAI,CAAC5C,eAAe,EAAE;QAEzB,OAAO,IAAI;MACb;;MAGA,IAAMA,eAAe,GAAG,IAAI,CAACA,eAAe;MAE5C,IAAMgD,eAGL,GAAG,IAAIC,GAAG,EAAE;MACb,KAAK,IAAMC,aAAa,IAAIC,MAAM,CAACC,IAAI,CAACpD,eAAe,CAAC,EAAE;QACxD,IAAMqD,WAAW,GAAGrD,eAAe,CAACkD,aAAa,CAAC;QAClD,IAAMI,eAAe,GAAGJ,aAAa,CAACK,WAAW,EAAE;QACnD,IAAMC,MAAM,GAAGR,eAAe,CAACS,GAAG,CAACH,eAAe,CAAC;QACnD,IAAIE,MAAM,EAAE;UACVA,MAAM,CAACH,WAAW,IAAI,IAAI,GAAGA,WAAW;UACxCL,eAAe,CAACU,GAAG,CAACJ,eAAe,EAAEE,MAAM,CAAC;QAC9C,CAAC,MAAM;UACLR,eAAe,CAACU,GAAG,CAACJ,eAAe,EAAE;YACnCA,eAAe,EAAfA,eAAe;YACfK,eAAe,EAAET,aAAa,CAACU,WAAW,EAAE;YAC5CP,WAAW,EAAXA;UACF,CAAC,CAAC;QACJ;MACF;;MAGA,IAAMQ,aAAa,GAAG,mBAAIb,eAAe,CAACc,MAAM,EAAE,EAAEC,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC,EAAK;QACjE,IAAID,CAAC,CAACL,eAAe,GAAGM,CAAC,CAACN,eAAe,EAAE;UACzC,OAAO,CAAC,CAAC;QACX;QACA,IAAIK,CAAC,CAACL,eAAe,GAAGM,CAAC,CAACN,eAAe,EAAE;UACzC,OAAO,CAAC;QACV;QACA,OAAO,CAAC;MACV,CAAC,CAAC;;MAGF,OACEE,aAAa,CACVK,GAAG,CAAC,UAAAV,MAAM,EAAI;QACb,OAAOA,MAAM,CAACF,eAAe,GAAG,IAAI,GAAGE,MAAM,CAACH,WAAW;MAC3D,CAAC,CAAC,CACDc,IAAI,CAAC,MAAM,CAAC,GAAG,MAAM;IAE5B;EAAC;IAAA;IAAA,OAED,2BAAkBX,MAAc,EAAW;MACzC,IAAMY,KAAK,GAAG,IAAI,CAAC5D,yBAAyB,CAACgD,MAAM,CAACD,WAAW,EAAE,CAAC;MAClE,OAAOa,KAAK,KAAKnE,SAAS,GAAGmE,KAAK,GAAG,IAAI;IAC3C;EAAC;IAAA;IAAA,OAED,0BAAiBZ,MAAc,EAAEY,KAAU,EAAQ;MACjD,IAAI,IAAI,CAACpF,UAAU,KAAK,IAAI,CAAClB,MAAM,EAAE;QACnC,MAAM,IAAI6C,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,IAAI,CAACN,QAAQ,CAACmD,MAAM,CAACD,WAAW,EAAE,CAAC,GAAGc,MAAM,CAACD,KAAK,CAAC;IACrD;;EAAC;IAAA;IAAA;IAKD,yBAAgBE,YAAoB,EAAkB;MACpD,IAAI,CAAC1E,aAAa,GAAG0E,YAAY;MACjC,OAAO,IAAI;IACb;;EAAC;IAAA;IAAA;IAKD,8BAAqBC,iBAAqC,EAAkB;MAC1E,IAAI,CAACzE,kBAAkB,GAAGyE,iBAAiB;MAC3C,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAED,cAAKC,MAAc,EAAEC,GAAW,EAAEC,KAAe,EAAQ;MAEvD,IAAI,IAAI,CAAC1F,UAAU,KAAK,IAAI,CAACnB,MAAM,EAAE;QACnC,MAAM,IAAI8C,KAAK,CAAC,8BAA8B,CAAC;MACjD;MACA,IAAI+D,KAAK,KAAKzE,SAAS,IAAI,CAACyE,KAAK,EAAE;QAEjC,MAAM,IAAI/D,KAAK,CAAC,6CAA6C,CAAC;MAChE;MACA,IAAI,CAAC8D,GAAG,EAAE;QACR,MAAM,IAAI9D,KAAK,CAAC,0BAA0B,CAAC;MAC7C;MACA,IAAI,CAACpB,OAAO,GAAGiF,MAAM,CAACZ,WAAW,EAAE;MACnC,IAAI,CAAClE,IAAI,GAAG+E,GAAG;MACf,IAAI,CAACpF,QAAQ,GAAG,KAAK;MACrB,IAAI,CAAC4C,aAAa,CAAC,IAAI,CAACnE,MAAM,CAAC;IACjC;EAAC;IAAA;IAAA,OAED,cAAK6G,IAAS,EAAQ;MAAA;MACpB,IAAI,IAAI,CAAC3F,UAAU,KAAK,IAAI,CAAClB,MAAM,EAAE;QACnC,MAAM,IAAI6C,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,IAAI,IAAI,CAACJ,KAAK,EAAE;QACd,MAAM,IAAII,KAAK,CAAC,+BAA+B,CAAC;MAClD;MACA,IAAI,CAACJ,KAAK,GAAG,IAAI;MACjB,IAAMqE,iBAAiB,GACrB,IAAI,CAAC/E,kBAAkB,IAAI,CAAC,CAAC,IAAI,CAACgF,kBAAkB,IAAI,CAAC,CAAC,IAAI,CAACC,UAAU;MAE3E,IAAI,CAAClC,cAAc,CAACmC,IAAI,CACtBzH,aAAa,CAAC0H,WAAW,CAAC,oBAAoB,EAAE,UAAAC,IAAI;QAAA,OAClD,MAAI,CAACC,mBAAmB,OAAxB,MAAI,qBAAwBD,IAAI,EAAC;MAAA,EAClC,CACF;MACD,IAAI,CAACrC,cAAc,CAACmC,IAAI,CACtBzH,aAAa,CAAC0H,WAAW,CAAC,2BAA2B,EAAE,UAAAC,IAAI;QAAA,OACzD,MAAI,CAACE,oBAAoB,OAAzB,MAAI,qBAAyBF,IAAI,EAAC;MAAA,EACnC,CACF;MACD,IAAI,CAACrC,cAAc,CAACmC,IAAI,CACtBzH,aAAa,CAAC0H,WAAW,CAAC,uBAAuB,EAAE,UAAAC,IAAI;QAAA,OACrD,MAAI,CAACG,gBAAgB,OAArB,MAAI,qBAAqBH,IAAI,EAAC;MAAA,EAC/B,CACF;MACD,IAAI,CAACrC,cAAc,CAACmC,IAAI,CACtBzH,aAAa,CAAC0H,WAAW,CAAC,kCAAkC,EAAE,UAAAC,IAAI;QAAA,OAChE,MAAI,CAACI,2BAA2B,OAAhC,MAAI,qBAAgCJ,IAAI,EAAC;MAAA,EAC1C,CACF;MACD,IAAI,CAACrC,cAAc,CAACmC,IAAI,CACtBzH,aAAa,CAAC0H,WAAW,CAAC,+BAA+B,EAAE,UAAAC,IAAI;QAAA,OAC7D,MAAI,CAAC3C,wBAAwB,OAA7B,MAAI,qBAA6B2C,IAAI,EAAC;MAAA,EACvC,CACF;MACD,IAAI,CAACrC,cAAc,CAACmC,IAAI,CACtBzH,aAAa,CAAC0H,WAAW,CAAC,4BAA4B,EAAE,UAAAC,IAAI;QAAA,OAC1D,MAAI,CAACK,qBAAqB,OAA1B,MAAI,qBAA0BL,IAAI,EAAC;MAAA,EACpC,CACF;MAED,IAAIM,kBAAsC,GAAG,MAAM;MACnD,IAAI,IAAI,CAACjF,aAAa,KAAK,aAAa,EAAE;QACxCiF,kBAAkB,GAAG,QAAQ;MAC/B;MACA,IAAI,IAAI,CAACjF,aAAa,KAAK,MAAM,EAAE;QACjCiF,kBAAkB,GAAG,MAAM;MAC7B;MAEA,IAAMC,MAAM,GAAG,SAATA,MAAM,GAAS;QACnB,IAAMC,YAAY,GAChB,MAAI,CAAC7F,aAAa,KAAK,SAAS,GAAG,MAAI,CAACA,aAAa,GAAG,MAAI,CAACF,IAAI;QACnE,MAAI,CAACF,QAAQ,GAAG,yBAAyB,GAAG6E,MAAM,CAACoB,YAAY,CAAC;QAChE,MAAI,CAAC3F,kBAAkB,CAAC4F,aAAa,CAAC,MAAI,CAAClG,QAAQ,CAAC;QACpD/B,SAAS,CACP,MAAI,CAAC8B,OAAO,EACZ,iDAAiD,EACjDkG,YAAY,CACb;QACDhI,SAAS,CACP,MAAI,CAACiC,IAAI,EACT,8CAA8C,EAC9C+F,YAAY,CACb;QACDnI,aAAa,CAACqI,WAAW,CACvB,MAAI,CAACpG,OAAO,EACZ,MAAI,CAACK,aAAa,EAClB,MAAI,CAACF,IAAI,EACT,MAAI,CAACW,QAAQ,EACbsE,IAAI;QAGJY,kBAAkB,EAClBX,iBAAiB,EACjB,MAAI,CAAC1F,OAAO;QAEZ,MAAI,CAAC0G,kBAAkB,CAACC,IAAI,CAAC,MAAI,CAAC,EAClC,MAAI,CAAC1G,eAAe,CACrB;MACH,CAAC;MACD,IAAIzB,wBAAwB,EAAE;QAC5BoI,UAAU,CAACN,MAAM,EAAE9H,wBAAwB,CAAC;MAC9C,CAAC,MAAM;QACL8H,MAAM,EAAE;MACV;IACF;EAAC;IAAA;IAAA,OAED,iBAAc;MACZ,IAAI,CAACnG,QAAQ,GAAG,IAAI;MACpB,IAAI,IAAI,CAACc,UAAU,EAAE;QACnB7C,aAAa,CAACyI,YAAY,CAAC,IAAI,CAAC5F,UAAU,CAAC;MAC7C;MAGA,IACE,EACE,IAAI,CAACnB,UAAU,KAAK,IAAI,CAACnB,MAAM,IAC9B,IAAI,CAACmB,UAAU,KAAK,IAAI,CAAClB,MAAM,IAAI,CAAC,IAAI,CAACyC,KAAM,IAChD,IAAI,CAACvB,UAAU,KAAK,IAAI,CAACf,IAAI,CAC9B,EACD;QACA,IAAI,CAAC8B,MAAM,EAAE;QACb,IAAI,CAACkC,aAAa,CAAC,IAAI,CAAChE,IAAI,CAAC;MAC/B;MAEA,IAAI,CAAC8B,MAAM,EAAE;IACf;EAAC;IAAA;IAAA,OAED,4BAAmBC,eAAwB,EAAQ;MACjD,IAAI,CAACA,eAAe,GAAGA,eAAe,IAAI,IAAI;MAC9C,IAAMgG,OAAO,GAAGhG,eAAe,IAAI,CAAC,CAAC;MACrC,IAAI,CAACQ,yBAAyB,GAAG2C,MAAM,CAACC,IAAI,CAAC4C,OAAO,CAAC,CAACC,MAAM,CAEzD,UAACC,YAAY,EAAEC,UAAU,EAAK;QAC/BD,YAAY,CAACC,UAAU,CAAC5C,WAAW,EAAE,CAAC,GAAGyC,OAAO,CAACG,UAAU,CAAC;QAC5D,OAAOD,YAAY;MACrB,CAAC,EAAE,CAAC,CAAC,CAAC;IACR;EAAC;IAAA;IAAA,OAED,uBAAcE,QAAgB,EAAQ;MACpC,IAAI,CAACpH,UAAU,GAAGoH,QAAQ;MAC1B,IAAI,CAACzE,aAAa,CAAC;QAACC,IAAI,EAAE;MAAkB,CAAC,CAAC;MAC9C,IAAIwE,QAAQ,KAAK,IAAI,CAACnI,IAAI,EAAE;QAC1B,IAAI,IAAI,CAACoB,QAAQ,EAAE;UACjB,IAAI,CAACsC,aAAa,CAAC;YAACC,IAAI,EAAE;UAAO,CAAC,CAAC;QACrC,CAAC,MAAM,IAAI,IAAI,CAACtC,SAAS,EAAE;UACzB,IAAI,IAAI,CAACK,SAAS,EAAE;YAClB,IAAI,CAACgC,aAAa,CAAC;cAACC,IAAI,EAAE;YAAS,CAAC,CAAC;UACvC,CAAC,MAAM;YACL,IAAI,CAACD,aAAa,CAAC;cAACC,IAAI,EAAE;YAAO,CAAC,CAAC;UACrC;QACF,CAAC,MAAM;UACL,IAAI,CAACD,aAAa,CAAC;YAACC,IAAI,EAAE;UAAM,CAAC,CAAC;QACpC;QACA,IAAI,CAACD,aAAa,CAAC;UAACC,IAAI,EAAE;QAAS,CAAC,CAAC;MACvC;IACF;;EAAC;IAAA;IAAA;IAGD,0BAAiBA,IAAY,EAAEyE,QAAuB,EAAQ;MAK5D,IAAIzE,IAAI,KAAK,kBAAkB,IAAIA,IAAI,KAAK,UAAU,EAAE;QACtD,IAAI,CAAC/B,kBAAkB,GAAG,IAAI;MAChC;MACA,qFAAuB+B,IAAI,EAAEyE,QAAQ;IACvC;EAAC;IAAA;IAAA,OArgBD,wBAAsBC,WAA4B,EAAE;MAClDvH,cAAc,CAACwC,YAAY,GAAG+E,WAAW;IAC3C;EAAC;EAAA;AAAA,EAvD2B9I,WAAW,kCAAIoB,UAAU,EAAC;AAAlDG,cAAc,CACXlB,MAAM,GAAWA,MAAM;AAD1BkB,cAAc,CAEXjB,MAAM,GAAWA,MAAM;AAF1BiB,cAAc,CAGXhB,gBAAgB,GAAWA,gBAAgB;AAH9CgB,cAAc,CAIXf,OAAO,GAAWA,OAAO;AAJ5Be,cAAc,CAKXd,IAAI,GAAWA,IAAI;AALtBc,cAAc,CAOXwC,YAAY,GAAoB,IAAI;AAsjB7CgF,MAAM,CAACC,OAAO,GAAGzH,cAAc"},"metadata":{},"sourceType":"module"}